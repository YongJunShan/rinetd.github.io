<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>时光小栈 on 时光小栈</title>
        <link>/</link>
        <language>zh-CN</language>
        <author>rinetd</author>
        <rights>Copyright (c) 2015, rinetd; all rights reserved.</rights>
        <updated>Mon, 02 Mar 2020 18:57:28 CST</updated>
        
        <item>
            <title>mpp region osd</title>
            <link>/hardware/hisilicon/mpp/mpp-region-osd/</link>
            <pubDate>Mon, 02 Mar 2020 18:57:28 CST</pubDate>
            <author>rinetd</author>
            <guid>/hardware/hisilicon/mpp/mpp-region-osd/</guid>
            <description>&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/mill_li/article/details/90262607&#34; target=&#34;_blank&#34;&gt;海思3516A区域管理操作汇总及位图填充示例_海思,OSD,点阵传位图_mill_li的博客-CSDN博客&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://bbs.ebaina.com/thread-10385-1-1.html&#34; target=&#34;_blank&#34;&gt;【已解决】关于Hi3516A做OSD的问题 - 海思平台开放论坛 - 易百纳论坛 - Powered by Discuz!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;目前用SDL生成了BMP图像，然后给到Hi3516A的Vpss通道，实现了如下图的效果，但是还有两个问题，希望大家能够帮忙看一下&lt;br /&gt;
1、生成的BMP图像的背景颜色如何变成透明的呢，现在有背景颜色不太好看&lt;br /&gt;
2、如何显示两行字符，即在目前显示的时间下面，再显示一行别的信息，这个需要怎么去做，有没有办法让生成的BMP图像有两行或者多行数据呢&lt;/p&gt;

&lt;p&gt;第一个问题可以利用overlay的alpha来处理,当然BMP图像要处理成有alpha的&lt;br /&gt;
第二个问题就是把几个BMP合成一个BMP而已&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;还搞得这么麻烦，我直接用freetype2就在上面画汉字字母了，还是实现了时间显示，根本就不用什么SDL&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;当Alpha 位为1时，芯片使用u32FgAlpha 进行透明度叠加；&lt;br /&gt;
当Alpha 位为0时，芯片使用u32BgAlpha 进行透明度叠加。&lt;br /&gt;
0 表示全透明；128表示不透明。&lt;/p&gt;

&lt;p&gt;而你的BMP的每个象素都是一种alpha的当然就只能一起变了,把要透明的像素的alpha和不要透明的像素的alpha设成不一样的&lt;br /&gt;
注意:这里讨论的实BMP图,而不是RGN的设定&lt;br /&gt;
举例:&lt;br /&gt;
比如你的BMP有两个像素(假设是16bits, RGN设为ARGB1555格式) ,假设BMP的buffer为[0x0000, 0x0123], 可以看出前一个点为黑色,后一个点为有色点,如果要黑点透明,那么要把黑点的值改为&lt;br /&gt;
0x8000, 同时u32FgAlpha=0, u32BgAlpha=128&lt;br /&gt;
这样一来有色点就留下了,黑点就透明了被下面的视频代替了&lt;/p&gt;

&lt;p&gt;关于BMP合并,如果格式相同,就是简单的内存搬移了,很简单&lt;/p&gt;

&lt;p&gt;可以分配一个大的内存,用SDL生成两个BMP内存,然后搬到大的内存就好了,只要注意下起始地址,高,宽和stride就可以了&lt;br /&gt;
然后把大的内存做为osd送给海思就能显示多行了&lt;/p&gt;

&lt;p&gt;s32Ret = SAMPLE_RGN_UpdateCanvas(&amp;quot;sys_time.bmp&amp;quot;, &amp;amp;stBitmap, HI_FALSE, 0, &amp;amp;stSize, stCanvasInfo.u32Stride, stRgnAttrSet.unAttr.stOverlayEx.enPixelFmt);&lt;/p&gt;

&lt;p&gt;请注意第三第四个参数, 这两个可以控制透明, 第三个设为HI_TRUE, 第四个设为BMP中需要透明的背景像素的值(你可以用打印的方法得到)&lt;/p&gt;

&lt;p&gt;也可以做个测试,第四个参数设为0x8000(从代码和贴出OSD的实际图猜的), 应该会看到osd中的字(黑色的部分, 希望值是0x8000,祈祷中...)透明了&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>启用linux内核对usb摄像头的支持</title>
            <link>/hardware/kernel/linux-kernel-uvc-usb-camera/</link>
            <pubDate>Sat, 29 Feb 2020 20:02:14 CST</pubDate>
            <author>rinetd</author>
            <guid>/hardware/kernel/linux-kernel-uvc-usb-camera/</guid>
            <description>&lt;p&gt;1、配置内核；允许如下命令配置linux内核&lt;/p&gt;

&lt;p&gt;make menuconfig&lt;/p&gt;

&lt;p&gt;2、启用摄像头支持，最后一步时根据自己需要进行选择摄像头配置。&lt;br /&gt;
      Device Drivers  ---&amp;gt;&lt;br /&gt;
               &amp;lt;&lt;em&gt;&amp;gt; Multimedia support  ---&amp;gt;&lt;br /&gt;
                         [&lt;/em&gt;]   Video capture adapters  ---&amp;gt;&lt;br /&gt;
                                [&lt;em&gt;]   V4L USB devices  ---&amp;gt;&lt;br /&gt;
                                         &amp;lt;&lt;/em&gt;&amp;gt;   USB Video Class (UVC)&lt;br /&gt;
                                          [*]     UVC input events device support   &lt;br /&gt;
————————————————&lt;br /&gt;
版权声明：本文为CSDN博主「yingxian_Fei」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。&lt;br /&gt;
原文链接：&lt;a href=&#34;https://blog.csdn.net/smilefyx/article/details/29574783&#34; target=&#34;_blank&#34;&gt;https://blog.csdn.net/smilefyx/article/details/29574783&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>raspberry</title>
            <link>/hardware/raspi/raspberry/</link>
            <pubDate>Sat, 29 Feb 2020 11:17:52 CST</pubDate>
            <author>rinetd</author>
            <guid>/hardware/raspi/raspberry/</guid>
            <description>&lt;p&gt;&lt;a href=&#34;https://bbs.pediy.com/thread-212775.htm&#34; target=&#34;_blank&#34;&gt;[原创]初玩树莓派B 3实用配置(vnc和串口)-『智能设备』-看雪安全论坛&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>macos cgo cross compile</title>
            <link>/macos/macos-cgo-cross-compile/</link>
            <pubDate>Fri, 28 Feb 2020 17:49:43 CST</pubDate>
            <author>rinetd</author>
            <guid>/macos/macos-cgo-cross-compile/</guid>
            <description>&lt;p&gt;记录在macOS上编译Windows和Linux的go程序，带CGO调用C代码，比如go-sqlite3包，已测试通过。&lt;/p&gt;

&lt;p&gt;参考链接：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/ibgo/p/6489488.html&#34; target=&#34;_blank&#34;&gt;https://www.cnblogs.com/ibgo/p/6489488.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mingw-w64.org/doku.php/download/macports&#34; target=&#34;_blank&#34;&gt;http://www.mingw-w64.org/doku.php/download/macports&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mattn/go-sqlite3/issues/532&#34; target=&#34;_blank&#34;&gt;https://github.com/mattn/go-sqlite3/issues/532&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mattn/go-sqlite3/issues/372#issuecomment-396863368&#34; target=&#34;_blank&#34;&gt;https://github.com/mattn/go-sqlite3/issues/372#issuecomment-396863368&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.filippo.io/easy-windows-and-linux-cross-compilers-for-macos/&#34; target=&#34;_blank&#34;&gt;https://blog.filippo.io/easy-windows-and-linux-cross-compilers-for-macos/&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Windows平台(mingw-w64)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;安装编译器：brew install mingw-w64&lt;/p&gt;

&lt;p&gt;编译指令：CGO_ENABLED=1 GOOS=windows GOARCH=amd64 CC=x86_64-w64-mingw32-gcc go build -v&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Linux平台（x86_64-linux-musl-gcc）&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;安装编译器：brew install FiloSottile/musl-cross/musl-cross&lt;/p&gt;

&lt;p&gt;编译指令：&lt;code&gt;CGO_ENABLED=1 GOOS=linux GOARCH=amd64 CC=x86_64-linux-musl-gcc CGO_LDFLAGS=&amp;quot;-static&amp;quot; go build -a -v&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;注：&lt;/p&gt;

&lt;p&gt;-a:重新编译&lt;/p&gt;

&lt;p&gt;-static表示静态连接，没有这个选项，linux上运行报：-bash: ./xxx: /lib/ld-musl-x86_64.so.1: bad ELF interpreter: No such file or directory&lt;br /&gt;
————————————————&lt;br /&gt;
版权声明：本文为CSDN博主「henly1217」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。&lt;br /&gt;
原文链接：&lt;a href=&#34;https://blog.csdn.net/henly1217/article/details/102551251&#34; target=&#34;_blank&#34;&gt;https://blog.csdn.net/henly1217/article/details/102551251&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>macos nginx rtmp</title>
            <link>/macos/macos-nginx-rtmp/</link>
            <pubDate>Thu, 27 Feb 2020 10:40:38 CST</pubDate>
            <author>rinetd</author>
            <guid>/macos/macos-nginx-rtmp/</guid>
            <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;从github下载home-brew对nginx的扩展：&lt;br /&gt;
安装 Nginx服务器 和 RTMP模块：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew tap denji/nginx
brew install nginx-full --with-rtmp-module
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#nginx的安装位置
/usr/local/Cellar/nginx-full/1.12.2/bin/nginx  //这里1.12.2是相应的版本，根据实际情况在变动
#nginx配置文件所在位置
/usr/local/etc/nginx/nginx.conf
#nginx服务器根目录所在位置 
/usr/local/var/www
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#brew 卸载软件
brew uninstall nginx

#查看安装信息(经常用到, 比如查看安装目录等):
brew info nginx

#查看已经安装的软件:
brew list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.安装信息，附带启动信息：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;==&amp;gt; nginx-full
Docroot is: /usr/local/var/www
The default port has been set in /usr/local/etc/nginx/nginx.conf to 8080 so that
nginx can run without sudo.
nginx will load all files in /usr/local/etc/nginx/servers/.

- Tips -
Run port 80:
 $ sudo chown root:wheel /usr/local/opt/nginx-full/bin/nginx
 $ sudo chmod u+s /usr/local/opt/nginx-full/bin/nginx

Reload config:
 $ nginx -s reload
Reopen Logfile:
 $ nginx -s reopen
Stop process:
 $ nginx -s stop
Waiting on exit process
 $ nginx -s quit

To have launchd start denji/nginx/nginx-full now and restart at login:
  brew services start denji/nginx/nginx-full
Or, if you don&#39;t want/need a background service you can just run:
  nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;配置RTMP服务：&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我们需要在Nginx的配置文件中进行数据修改&lt;br /&gt;
打开 &lt;code&gt;open /usr/local/etc/nginx/nginx.conf&lt;/code&gt; ，在http节点下面(即文件尾部)加上rtmp配置。&lt;br /&gt;
打开路径下的nginx文件夹，然后找到nginx.conf这个文件，右键用Xcode打开。在底部添加代码&lt;/p&gt;

&lt;p&gt;rtmp {                                                   //协议名称&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {                                             //说明内部中是服务器相关配置
    listen 1935;                                     //监听的端口号, rtmp协议的默认端口号是1935
    application zbcs {                               //访问的应用路径是 zbcs
        live on;                                     //开启实时
        record off;                                  //不记录数据
    }    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;br /&gt;
如果在HTTP节点下面这些代码，那么就将listen后面的数字改成1935，application后面改成zbcs。&lt;br /&gt;
关闭文件，执行下面命令！！！！！&lt;br /&gt;
关闭文件，执行下面命令！！！！！&lt;br /&gt;
关闭文件，执行下面命令！！！！！&lt;/p&gt;

&lt;p&gt;nginx -s reload      //这一步必须执行，重启Nginx&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#配置rtmp server
rtmp {
        server {
                listen        1935;
                chunk_size    4000;

                #配置了一个叫live的应用
                application live {
                        live       on;       #保持开启
                        record     off;      #停止录制
                        allow play all;      #允许所有请求
                }
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;检测rtmp服务有没有启动：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;netstat -an |grep 1935

tcp4       0      0  *.1935                 *.*                    LISTEN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先clone nginx项目到本地：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew tap homebrew/nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行安装&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install nginx-full --with-rtmp-module
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上步骤nginx和rtmp模块就安装好了，下面开始来配置nginx的rtmp模块&lt;/p&gt;

&lt;p&gt;首先找到nginx安装位置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew info nginx-full
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行上面的命令后我们可以看到终端信息&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/682451-1a929a6dd7413675.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;nginx安装.png&lt;/p&gt;

&lt;p&gt;nginx安装所在位置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/local/Cellar/nginx-full/1.10.2/bin/nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;nginx配置文件所在位置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/local/etc/nginx/nginx.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;三、启动nginx服务&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;信息如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/682451-0334b589b3c97c7c.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;nginx.png&lt;/p&gt;

&lt;p&gt;在浏览器里打开&lt;a href=&#34;https://link.jianshu.com/?t=http://localhost:8080&#34; target=&#34;_blank&#34;&gt;http://localhost:8080&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果出现下图, 则表示安装成功&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/682451-5624d30b2d6631a6.png?imageMogr2/auto-orient/strip|imageView2/2/w/1038/format/webp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;test.png&lt;/p&gt;

&lt;p&gt;如果终端上提示&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/682451-75ff1a8e35696f2d.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;tips.png&lt;/p&gt;

&lt;p&gt;则表示8080端口被占用了, 查看端口PID&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lsof -i tcp:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;根据端口PID, kill掉9603换成自己8080端口的PID&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kill 9603
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后重新执行nginx, 打开&lt;a href=&#34;https://link.jianshu.com/?t=http://localhost:8080&#34; target=&#34;_blank&#34;&gt;http://localhost:8080&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;四、配置ramp&lt;br /&gt;
首先我们查看nginx安装到哪了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew info nginx-full
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如图找到nginx.conf配置文件所在位置&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/682451-a1a7bb169c168d35.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;location.png&lt;/p&gt;

&lt;p&gt;打开Finder Shift + command + G前往，用记事本工具打开nginx.conf&lt;br /&gt;
在http节点后面加上rtmp配置：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/682451-69177fa0a9025456.png?imageMogr2/auto-orient/strip|imageView2/2/w/826/format/webp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;config.png&lt;/p&gt;

&lt;p&gt;然后重启配置文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nginx -s reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;五、安装ffmepg工具&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install ffmpeg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装ffmpeg时间就要长一点了. 如果速度过慢, 可以尝试翻墙。等待的过程中, 再安装一个支持rtmp协议的视频播放器VLC&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/682451-814b67e0bf033906.png?imageMogr2/auto-orient/strip|imageView2/2/w/242/format/webp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;VLC.png&lt;/p&gt;

&lt;p&gt;终端显示如下信息表示ffmepg安装成功&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/682451-eb71afa3308188c6.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ffmpeg.png&lt;/p&gt;

&lt;p&gt;六、ffmpeg推流&lt;br /&gt;
这里操作的是mac桌面的一个test.mp4视频为例, 执行推流命令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ffmpeg -re -i /Users/maying/Desktop/test.mp4 -vcodec copy -f flv rtmp://localhost:1935/rtmplive/room
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ps：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ffmpeg -re -i 你的视频文件的绝对路径 -vcodec copy -f flv rtmp://localhost:1935/rtmplive/room
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;推流终端信息如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/682451-a57aa32e32727107.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;推流.png&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/682451-a1e39d85689866a3.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;推流tip.png&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/682451-5871d33586064dc9.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;推流tip2.png&lt;/p&gt;

&lt;p&gt;将视频推流到服务器后，打开VLC，然后File-&amp;gt;open network-&amp;gt;输入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rtmp://localhost:1935/rtmplive/room
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/682451-5038592f4c696c02.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;video.png&lt;/p&gt;

&lt;p&gt;就可以查看视频了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/682451-88e76e74c4c5c727.png?imageMogr2/auto-orient/strip|imageView2/2/w/1196/format/webp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;video.png&lt;/p&gt;

&lt;p&gt;ps：&lt;br /&gt;
终端错误信息处理：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/682451-b1a9b19dc04072f3.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;error.png&lt;/p&gt;

&lt;p&gt;1.上面这个是修改配置文件后需要重新加载nginx -s reload；&lt;br /&gt;
2.输入命令行的时候需要注意，可能会出错。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>caffe blob</title>
            <link>/ai/caffe/caffe-blob/</link>
            <pubDate>Tue, 25 Feb 2020 21:12:34 CST</pubDate>
            <author>rinetd</author>
            <guid>/ai/caffe/caffe-blob/</guid>
            <description>

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/blogshinelee/article/details/84281475&#34; target=&#34;_blank&#34;&gt;Caffe源码理解1：Blob存储结构与设计_进击的小学生-CSDN博客&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;blob作用&#34;&gt;Blob作用&lt;/h1&gt;

&lt;p&gt;据&lt;a href=&#34;http://caffe.berkeleyvision.org/tutorial/net_layer_blob.html&#34; target=&#34;_blank&#34;&gt;Caffe官方&lt;/a&gt;描述：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A Blob is a wrapper over the actual data being processed and passed along by Caffe&lt;/strong&gt;, and also under the hood provides synchronization capability between the CPU and the GPU. Mathematically, &lt;strong&gt;a blob is an N-dimensional array stored in a C-contiguous fashion.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Caffe stores and communicates data using blobs&lt;/strong&gt;. Blobs provide a unified memory interface holding data; e.g., batches of images, model parameters, and derivatives for optimization.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Blobs conceal the computational and mental overhead of mixed CPU/GPU operation&lt;/strong&gt; by synchronizing from the CPU host to the GPU device as needed. Memory on the host and device is allocated on demand (lazily) for efficient memory usage.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;Blob&lt;/code&gt;是Caffe中的基础数据结构，主要作用如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;存储和传输数据&lt;/strong&gt;，对外提供统一的内存接口。在Caffe中，输入图像、每层的权重和反向传播时的梯度、每层的输入和输出等都以&lt;code&gt;Blob&lt;/code&gt;形式管理&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;隐藏CPU和GPU之间数据同步的细节&lt;/strong&gt;（通过&lt;code&gt;SyncedMemory&lt;/code&gt;实现），用户使用时不需要自己管理CPU和GPU间的数据同步&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在逻辑上，&lt;code&gt;Blob&lt;/code&gt;是个&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-1&#34; style=&#34;width: 1.139em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 1.139em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1001.1em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-2&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 1.139em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1001.1em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-3&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-4&#34;&gt;&lt;span class=&#34;msub&#34; id=&#34;MathJax-Span-5&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 1.139em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.74em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-6&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;N&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;position: absolute; top: -3.818em; left: 0.674em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-7&#34; style=&#34;font-size: 70.7%; font-family: STIXGeneral-Italic;&#34;&gt;d&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.204em; border-left: 0px solid; width: 0px; height: 0.932em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      N_d&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;Nd​维张量。当&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-8&#34; style=&#34;width: 2.946em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 2.946em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1002.91em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-9&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 2.946em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1002.91em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-10&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-11&#34;&gt;&lt;span class=&#34;msub&#34; id=&#34;MathJax-Span-12&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 1.139em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.74em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-13&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;N&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;position: absolute; top: -3.818em; left: 0.674em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-14&#34; style=&#34;font-size: 70.7%; font-family: STIXGeneral-Italic;&#34;&gt;d&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-15&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.312em;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mn&#34; id=&#34;MathJax-Span-16&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.312em;&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.204em; border-left: 0px solid; width: 0px; height: 0.932em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      N_d=4&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;Nd​=4时，&lt;code&gt;Blob&lt;/code&gt;的shape定义为&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-17&#34; style=&#34;width: 6.25em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 6.25em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1006.22em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-18&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 6.25em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1006.22em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-19&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-20&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-21&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;N&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-22&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.261em;&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-23&#34; style=&#34;font-family: STIXGeneral-Italic; padding-left: 0.261em;&#34;&gt;C&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-24&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.261em;&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-25&#34; style=&#34;font-family: STIXGeneral-Italic; padding-left: 0.261em;&#34;&gt;H&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-26&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.261em;&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-27&#34; style=&#34;font-family: STIXGeneral-Italic; padding-left: 0.261em;&#34;&gt;W&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.049em; border-left: 0px solid; width: 0px; height: 0.777em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mi&gt;H&lt;/mi&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      N * C * H * W&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;N∗C∗H∗W，即&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-28&#34; style=&#34;width: 13.789em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 13.789em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1013.75em, 4.34em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-29&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 13.789em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1013.75em, 4.34em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-30&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-31&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-32&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;N&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-33&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-34&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-35&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.261em;&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-36&#34; style=&#34;font-family: STIXGeneral-Italic; padding-left: 0.261em;&#34;&gt;C&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-37&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-38&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-39&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-40&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-41&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-42&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;l&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-43&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.261em;&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-44&#34; style=&#34;font-family: STIXGeneral-Italic; padding-left: 0.261em;&#34;&gt;H&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-45&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-46&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-47&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-48&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-49&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;t&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-50&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.261em;&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-51&#34; style=&#34;font-family: STIXGeneral-Italic; padding-left: 0.261em;&#34;&gt;W&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-52&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-53&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;d&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-54&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;t&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-55&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.256em; border-left: 0px solid; width: 0px; height: 0.984em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mi&gt;H&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      Num * Channel * Height * Width&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;Num∗Channel∗Height∗Width，可以表示输入图像Batch、卷积层的kernel参数、卷积层的输入输出map等；当&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-56&#34; style=&#34;width: 2.946em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 2.946em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1002.91em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-57&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 2.946em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1002.91em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-58&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-59&#34;&gt;&lt;span class=&#34;msub&#34; id=&#34;MathJax-Span-60&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 1.139em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.74em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-61&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;N&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;position: absolute; top: -3.818em; left: 0.674em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-62&#34; style=&#34;font-size: 70.7%; font-family: STIXGeneral-Italic;&#34;&gt;d&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-63&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.312em;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mn&#34; id=&#34;MathJax-Span-64&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.312em;&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.204em; border-left: 0px solid; width: 0px; height: 0.932em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      N&lt;em&gt;d=2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;Nd​=2时，可以表示全连接层的权重，&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-65&#34; style=&#34;width: 3.978em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 3.978em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1004em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-66&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 3.978em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1004em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-67&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-68&#34;&gt;&lt;span class=&#34;msub&#34; id=&#34;MathJax-Span-69&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 1.655em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.74em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-70&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;N&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;position: absolute; top: -3.818em; left: 0.674em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-71&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-72&#34; style=&#34;font-size: 70.7%; font-family: STIXGeneral-Italic;&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-73&#34; style=&#34;font-size: 70.7%; font-family: STIXGeneral-Italic;&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-74&#34; style=&#34;font-size: 70.7%; font-family: STIXGeneral-Italic;&#34;&gt;t&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-75&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.261em;&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;msub&#34; id=&#34;MathJax-Span-76&#34; style=&#34;padding-left: 0.261em;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 1.293em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.74em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-77&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;N&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;position: absolute; top: -3.818em; left: 0.674em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-78&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-79&#34; style=&#34;font-size: 70.7%; font-family: STIXGeneral-Italic;&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-80&#34; style=&#34;font-size: 70.7%; font-family: STIXGeneral-Italic;&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.204em; border-left: 0px solid; width: 0px; height: 0.932em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      N&lt;/em&gt;{out} * N_{in}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;Nout​∗Nin​；当&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-81&#34; style=&#34;width: 2.946em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 2.946em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1002.81em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-82&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 2.946em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1002.81em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-83&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-84&#34;&gt;&lt;span class=&#34;msub&#34; id=&#34;MathJax-Span-85&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 1.139em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.74em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-86&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;N&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;position: absolute; top: -3.818em; left: 0.674em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-87&#34; style=&#34;font-size: 70.7%; font-family: STIXGeneral-Italic;&#34;&gt;d&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-88&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.312em;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mn&#34; id=&#34;MathJax-Span-89&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.312em;&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.204em; border-left: 0px solid; width: 0px; height: 0.932em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      N_d=1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;Nd​=1时，可以表示卷积层和全连接层的bias参数。&lt;/p&gt;

&lt;p&gt;具体地，&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-90&#34; style=&#34;width: 2.946em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 2.946em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1002.91em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-91&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 2.946em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1002.91em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-92&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-93&#34;&gt;&lt;span class=&#34;msub&#34; id=&#34;MathJax-Span-94&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 1.139em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.74em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-95&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;N&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;position: absolute; top: -3.818em; left: 0.674em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-96&#34; style=&#34;font-size: 70.7%; font-family: STIXGeneral-Italic;&#34;&gt;d&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-97&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.312em;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mn&#34; id=&#34;MathJax-Span-98&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.312em;&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.204em; border-left: 0px solid; width: 0px; height: 0.932em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      N_d=4&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;Nd​=4，&lt;code&gt;Blob&lt;/code&gt;表示&lt;strong&gt;输入图像&lt;/strong&gt;时，&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-99&#34; style=&#34;width: 0.725em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 0.725em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.74em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-100&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 0.725em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.74em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-101&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-102&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-103&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;N&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.049em; border-left: 0px solid; width: 0px; height: 0.777em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      N&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;N为当前批次的图片数量即MiniBatchNum，&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-104&#34; style=&#34;width: 0.674em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 0.674em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.69em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-105&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 0.674em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.69em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-106&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-107&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-108&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;C&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.049em; border-left: 0px solid; width: 0px; height: 0.777em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      C&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;C为图像的通道数，RGB图&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-109&#34; style=&#34;width: 2.481em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 2.481em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1002.45em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-110&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 2.481em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1002.45em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-111&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-112&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-113&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;C&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-114&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.312em;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mn&#34; id=&#34;MathJax-Span-115&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.312em;&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.049em; border-left: 0px solid; width: 0px; height: 0.777em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      C=3&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;C=3，&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-116&#34; style=&#34;width: 0.777em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 0.777em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.79em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-117&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 0.777em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.79em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-118&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-119&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-120&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;H&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.049em; border-left: 0px solid; width: 0px; height: 0.777em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;H&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      H&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;H和&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-121&#34; style=&#34;width: 0.932em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 0.932em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.9em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-122&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 0.932em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.9em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-123&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-124&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-125&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;W&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.049em; border-left: 0px solid; width: 0px; height: 0.777em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      W&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;W为图像的高和宽。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-126&#34; style=&#34;width: 2.946em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 2.946em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1002.91em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-127&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 2.946em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1002.91em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-128&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-129&#34;&gt;&lt;span class=&#34;msub&#34; id=&#34;MathJax-Span-130&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 1.139em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.74em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-131&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;N&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;position: absolute; top: -3.818em; left: 0.674em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-132&#34; style=&#34;font-size: 70.7%; font-family: STIXGeneral-Italic;&#34;&gt;d&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-133&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.312em;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mn&#34; id=&#34;MathJax-Span-134&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.312em;&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.204em; border-left: 0px solid; width: 0px; height: 0.932em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      N_d=4&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;Nd​=4，&lt;code&gt;Blob&lt;/code&gt;表示&lt;strong&gt;卷积层的输入输出&lt;/strong&gt;时，&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-135&#34; style=&#34;width: 2.533em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 2.533em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1002.45em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-136&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 2.533em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1002.45em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-137&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-138&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-139&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;N&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-140&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.312em;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mn&#34; id=&#34;MathJax-Span-141&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.312em;&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.049em; border-left: 0px solid; width: 0px; height: 0.777em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      N=1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;N=1，&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-142&#34; style=&#34;width: 0.674em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 0.674em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.69em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-143&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 0.674em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.69em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-144&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-145&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-146&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;C&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.049em; border-left: 0px solid; width: 0px; height: 0.777em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      C&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;C为特征图的数量，&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-147&#34; style=&#34;width: 0.777em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 0.777em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.79em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-148&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 0.777em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.79em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-149&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-150&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-151&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;H&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.049em; border-left: 0px solid; width: 0px; height: 0.777em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;H&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      H&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;H和&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-152&#34; style=&#34;width: 0.932em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 0.932em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.9em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-153&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 0.932em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.9em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-154&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-155&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-156&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;W&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.049em; border-left: 0px solid; width: 0px; height: 0.777em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      W&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;W为特征图的高和宽。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-157&#34; style=&#34;width: 2.946em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 2.946em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1002.91em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-158&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 2.946em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1002.91em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-159&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-160&#34;&gt;&lt;span class=&#34;msub&#34; id=&#34;MathJax-Span-161&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 1.139em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.74em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-162&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;N&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;position: absolute; top: -3.818em; left: 0.674em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-163&#34; style=&#34;font-size: 70.7%; font-family: STIXGeneral-Italic;&#34;&gt;d&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-164&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.312em;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mn&#34; id=&#34;MathJax-Span-165&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.312em;&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.204em; border-left: 0px solid; width: 0px; height: 0.932em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      N_d=4&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;Nd​=4，&lt;code&gt;Blob&lt;/code&gt;表示&lt;strong&gt;卷积层kernel参数&lt;/strong&gt;时，&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-166&#34; style=&#34;width: 0.725em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 0.725em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.74em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-167&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 0.725em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.74em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-168&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-169&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-170&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;N&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.049em; border-left: 0px solid; width: 0px; height: 0.777em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      N&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;N为当前层输出特征图的数量，其与卷积核数量相同，&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-171&#34; style=&#34;width: 0.674em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 0.674em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.69em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-172&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 0.674em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.69em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-173&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-174&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-175&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;C&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.049em; border-left: 0px solid; width: 0px; height: 0.777em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      C&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;C为当前层输入特征图的数量，其与一个卷积核的层数相同，&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-176&#34; style=&#34;width: 0.777em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 0.777em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.79em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-177&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 0.777em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.79em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-178&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-179&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-180&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;H&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.049em; border-left: 0px solid; width: 0px; height: 0.777em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;H&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      H&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;H和&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-181&#34; style=&#34;width: 0.932em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 0.932em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.9em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-182&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 0.932em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.9em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-183&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-184&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-185&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;W&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.049em; border-left: 0px solid; width: 0px; height: 0.777em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      W&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;W为卷积核的高和宽，每个卷积是三维的即&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-186&#34; style=&#34;width: 4.443em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 4.443em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1004.46em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-187&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 4.443em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1004.46em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-188&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-189&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-190&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;C&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-191&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.261em;&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-192&#34; style=&#34;font-family: STIXGeneral-Italic; padding-left: 0.261em;&#34;&gt;H&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-193&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.261em;&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-194&#34; style=&#34;font-family: STIXGeneral-Italic; padding-left: 0.261em;&#34;&gt;W&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.049em; border-left: 0px solid; width: 0px; height: 0.777em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mi&gt;H&lt;/mi&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      C*H*W&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;C∗H∗W。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-195&#34; style=&#34;width: 2.946em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 2.946em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1002.91em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-196&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 2.946em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1002.91em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-197&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-198&#34;&gt;&lt;span class=&#34;msub&#34; id=&#34;MathJax-Span-199&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 1.139em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.74em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-200&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;N&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;position: absolute; top: -3.818em; left: 0.674em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-201&#34; style=&#34;font-size: 70.7%; font-family: STIXGeneral-Italic;&#34;&gt;d&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-202&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.312em;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mn&#34; id=&#34;MathJax-Span-203&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.312em;&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.204em; border-left: 0px solid; width: 0px; height: 0.932em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      N&lt;em&gt;d=2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;Nd​=2，&lt;code&gt;Blob&lt;/code&gt;表示&lt;strong&gt;全连接层的权重&lt;/strong&gt;时，shape为&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-204&#34; style=&#34;width: 3.978em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 3.978em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1004em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-205&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 3.978em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1004em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-206&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-207&#34;&gt;&lt;span class=&#34;msub&#34; id=&#34;MathJax-Span-208&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 1.655em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.74em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-209&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;N&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;position: absolute; top: -3.818em; left: 0.674em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-210&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-211&#34; style=&#34;font-size: 70.7%; font-family: STIXGeneral-Italic;&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-212&#34; style=&#34;font-size: 70.7%; font-family: STIXGeneral-Italic;&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-213&#34; style=&#34;font-size: 70.7%; font-family: STIXGeneral-Italic;&#34;&gt;t&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-214&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.261em;&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;msub&#34; id=&#34;MathJax-Span-215&#34; style=&#34;padding-left: 0.261em;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 1.293em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.74em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-216&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;N&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;position: absolute; top: -3.818em; left: 0.674em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-217&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-218&#34; style=&#34;font-size: 70.7%; font-family: STIXGeneral-Italic;&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-219&#34; style=&#34;font-size: 70.7%; font-family: STIXGeneral-Italic;&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.204em; border-left: 0px solid; width: 0px; height: 0.932em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      N&lt;/em&gt;{out} * N&lt;em&gt;{in}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;Nout​∗Nin​的二维矩阵，&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-220&#34; style=&#34;width: 1.655em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 1.655em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1001.67em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-221&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 1.655em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1001.67em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-222&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-223&#34;&gt;&lt;span class=&#34;msub&#34; id=&#34;MathJax-Span-224&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 1.655em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.74em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-225&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;N&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;position: absolute; top: -3.818em; left: 0.674em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-226&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-227&#34; style=&#34;font-size: 70.7%; font-family: STIXGeneral-Italic;&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-228&#34; style=&#34;font-size: 70.7%; font-family: STIXGeneral-Italic;&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-229&#34; style=&#34;font-size: 70.7%; font-family: STIXGeneral-Italic;&#34;&gt;t&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.204em; border-left: 0px solid; width: 0px; height: 0.932em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      N&lt;/em&gt;{out}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;Nout​为输出数量，&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-230&#34; style=&#34;width: 1.293em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 1.293em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1001.31em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-231&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 1.293em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1001.31em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-232&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-233&#34;&gt;&lt;span class=&#34;msub&#34; id=&#34;MathJax-Span-234&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 1.293em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.74em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-235&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;N&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;position: absolute; top: -3.818em; left: 0.674em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-236&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-237&#34; style=&#34;font-size: 70.7%; font-family: STIXGeneral-Italic;&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-238&#34; style=&#34;font-size: 70.7%; font-family: STIXGeneral-Italic;&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.204em; border-left: 0px solid; width: 0px; height: 0.932em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      N_{in}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;Nin​为输入数量。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-239&#34; style=&#34;width: 2.946em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 2.946em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1002.81em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-240&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 2.946em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1002.81em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-241&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-242&#34;&gt;&lt;span class=&#34;msub&#34; id=&#34;MathJax-Span-243&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 1.139em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.74em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-244&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;N&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;position: absolute; top: -3.818em; left: 0.674em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-245&#34; style=&#34;font-size: 70.7%; font-family: STIXGeneral-Italic;&#34;&gt;d&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-246&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.312em;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mn&#34; id=&#34;MathJax-Span-247&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.312em;&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.204em; border-left: 0px solid; width: 0px; height: 0.932em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      N&lt;em&gt;d=1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;Nd​=1，&lt;code&gt;Blob&lt;/code&gt;为长度为&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-248&#34; style=&#34;width: 0.725em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 0.725em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.74em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-249&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 0.725em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.74em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-250&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-251&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-252&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;N&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.049em; border-left: 0px solid; width: 0px; height: 0.777em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      N&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;N的向量，表示&lt;strong&gt;卷积层bias参数&lt;/strong&gt;时，&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-253&#34; style=&#34;width: 0.725em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 0.725em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.74em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-254&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 0.725em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.74em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-255&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-256&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-257&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;N&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.049em; border-left: 0px solid; width: 0px; height: 0.777em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      N&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;N为卷积核数量（与输出特征图数量相同），表示&lt;strong&gt;全连接层bias参数&lt;/strong&gt;时，&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-258&#34; style=&#34;width: 0.725em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 0.725em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.74em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-259&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 0.725em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.74em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-260&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-261&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-262&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;N&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.049em; border-left: 0px solid; width: 0px; height: 0.777em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      N&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;N为输出数量（与上面的&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-263&#34; style=&#34;width: 1.655em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 1.655em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1001.67em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-264&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 1.655em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1001.67em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-265&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-266&#34;&gt;&lt;span class=&#34;msub&#34; id=&#34;MathJax-Span-267&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 1.655em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1000.74em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-268&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;N&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;position: absolute; top: -3.818em; left: 0.674em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-269&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-270&#34; style=&#34;font-size: 70.7%; font-family: STIXGeneral-Italic;&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-271&#34; style=&#34;font-size: 70.7%; font-family: STIXGeneral-Italic;&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-272&#34; style=&#34;font-size: 70.7%; font-family: STIXGeneral-Italic;&#34;&gt;t&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.204em; border-left: 0px solid; width: 0px; height: 0.932em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      N&lt;/em&gt;{out}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;Nout​相同）。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;主要成员变量&#34;&gt;主要成员变量&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-prism&#34;&gt;shared_ptr&amp;lt;SyncedMemory&amp;gt; data_; // 数据，存储图像、参数、输入输出等
shared_ptr&amp;lt;SyncedMemory&amp;gt; diff_; // 反向传播时的梯度，训练阶段update时参数的更新量
shared_ptr&amp;lt;SyncedMemory&amp;gt; shape_data_; // GPU shape，与下面的shape是相同的
vector&amp;lt;int&amp;gt; shape_; // shape，data和diff相同
int count_; // 张量中的元素数量，比如 N*C*H*W
int capacity_; // 容量，当前分配内存的大小，当reshape时，可能需要扩容
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;1&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;3&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;4&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;5&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;6&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;blob存储结构&#34;&gt;Blob存储结构&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;Blob&lt;/code&gt;的&lt;code&gt;data_&lt;/code&gt;和&lt;code&gt;diff_&lt;/code&gt;对应的数据区，在内存中均以&lt;strong&gt;行有先&lt;/strong&gt;的方式存储（C语言风格）。行优先和列优先的存储方式如下图所示，9个数连续存储，表示同一个矩阵，但是存储顺序不同，图片来自&lt;a href=&#34;https://wiki2.org/en/Row-major_order&#34; target=&#34;_blank&#34;&gt;WIKI&lt;/a&gt;：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2018/11/22/FPuXjg.png&#34; alt=&#34;Row- and column-major order&#34; /&gt;&lt;/p&gt;

&lt;p&gt;当输入图像为1张RGB图时，shape为&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-273&#34; style=&#34;width: 5.114em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 5.114em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1005.08em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-274&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 5.114em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1005.08em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-275&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-276&#34;&gt;&lt;span class=&#34;mn&#34; id=&#34;MathJax-Span-277&#34; style=&#34;font-family: STIXGeneral-Regular;&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-278&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.261em;&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mn&#34; id=&#34;MathJax-Span-279&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.261em;&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-280&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.261em;&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mn&#34; id=&#34;MathJax-Span-281&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.261em;&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-282&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.261em;&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mn&#34; id=&#34;MathJax-Span-283&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.261em;&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.049em; border-left: 0px solid; width: 0px; height: 0.829em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      1*3*4*5&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;1∗3∗4∗5，其存储顺序如下图所示，图片素材来自&lt;a href=&#34;http://eng-shady-mohsen.blogspot.com/2011/04/graphical-presentation-of-rgb-3d-matrix.html&#34; target=&#34;_blank&#34;&gt;链接&lt;/a&gt;。channel维上，0为R，1为G、2为B，先在R上行有先存储，再在G上行有先存储，最后在B上行有先存储。这里仅作示意，在caffe中实际存储顺序为BGR。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2018/11/22/FP65As.png&#34; alt=&#34;RGB-Blob-Memory&#34; /&gt;&lt;/p&gt;

&lt;p&gt;当&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-284&#34; style=&#34;width: 2.533em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 2.533em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1002.5em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-285&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 2.533em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1002.5em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-286&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-287&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-288&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;N&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-289&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.312em;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mn&#34; id=&#34;MathJax-Span-290&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.312em;&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.049em; border-left: 0px solid; width: 0px; height: 0.777em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      N=4&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;N=4时，&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-291&#34; style=&#34;width: 13.789em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 13.789em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1013.75em, 4.34em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-292&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 13.789em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1013.75em, 4.34em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-293&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-294&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-295&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;N&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-296&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-297&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-298&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.261em;&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-299&#34; style=&#34;font-family: STIXGeneral-Italic; padding-left: 0.261em;&#34;&gt;C&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-300&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-301&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-302&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-303&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-304&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-305&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;l&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-306&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.261em;&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-307&#34; style=&#34;font-family: STIXGeneral-Italic; padding-left: 0.261em;&#34;&gt;H&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-308&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-309&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-310&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-311&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-312&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;t&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-313&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.261em;&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-314&#34; style=&#34;font-family: STIXGeneral-Italic; padding-left: 0.261em;&#34;&gt;W&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-315&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-316&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;d&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-317&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;t&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-318&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.256em; border-left: 0px solid; width: 0px; height: 0.984em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mi&gt;H&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      Num * Channel * Height * Width&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;Num∗Channel∗Height∗Width，&lt;code&gt;Blob&lt;/code&gt;在&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-319&#34; style=&#34;width: 2.533em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 2.533em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1002.5em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-320&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 2.533em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1002.5em, 4.133em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-321&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-322&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-323&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;W&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-324&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-325&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;d&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-326&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;t&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-327&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.049em; border-left: 0px solid; width: 0px; height: 0.829em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      Width&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;Width维上连续存储，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2018/11/16/ixAK2V.png&#34; alt=&#34;caffe-Blob-memory_structure&#34; /&gt;&lt;/p&gt;

&lt;p&gt;理解了上图，再理解多维&lt;code&gt;Blob&lt;/code&gt;的拼接、裁剪等操作就很容易了。&lt;/p&gt;

&lt;p&gt;通过&lt;code&gt;Blob&lt;/code&gt;的&lt;code&gt;offset&lt;/code&gt;成员函数可以获得&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-328&#34; style=&#34;width: 4.133em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 4.133em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1004.1em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-329&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 4.133em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1004.1em, 4.288em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-330&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-331&#34;&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-332&#34; style=&#34;vertical-align: 0em;&#34;&gt;&lt;span style=&#34;font-family: STIXGeneral-Regular;&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-333&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-334&#34; style=&#34;font-family: STIXGeneral-Regular;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-335&#34; style=&#34;font-family: STIXGeneral-Italic; padding-left: 0.209em;&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-336&#34; style=&#34;font-family: STIXGeneral-Regular;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-337&#34; style=&#34;font-family: STIXGeneral-Italic; padding-left: 0.209em;&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-338&#34; style=&#34;font-family: STIXGeneral-Regular;&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-339&#34; style=&#34;font-family: STIXGeneral-Italic; padding-left: 0.209em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-340&#34; style=&#34;vertical-align: 0em;&#34;&gt;&lt;span style=&#34;font-family: STIXGeneral-Regular;&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.204em; border-left: 0px solid; width: 0px; height: 0.984em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mo&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      (n, c, h, w)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;(n,c,h,w)处的偏移量，偏移的计算方式与行优先存储是一致的，代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prism&#34;&gt;inline int offset(const int n, const int c = 0, const int h = 0,
      const int w = 0) const {
    CHECK_GE(n, 0);
    CHECK_LE(n, num());
    CHECK_GE(channels(), 0);
    CHECK_LE(c, channels());
    CHECK_GE(height(), 0);
    CHECK_LE(h, height());
    CHECK_GE(width(), 0);
    CHECK_LE(w, width());
    return ((n * channels() + c) * height() + h) * width() + w;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;1&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;3&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;4&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;5&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;6&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;7&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;8&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;9&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;10&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;11&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;12&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;cpu与gpu间的数据传递&#34;&gt;CPU与GPU间的数据传递&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-prism&#34;&gt;const Dtype* cpu_data() const; // 不可修改数据，return (const Dtype*)data_-&amp;gt;cpu_data();
const Dtype* gpu_data() const; // return (const Dtype*)data_-&amp;gt;gpu_data();
Dtype* mutable_cpu_data(); // 可修改数据，return static_cast&amp;lt;Dtype*&amp;gt;(data_-&amp;gt;mutable_cpu_data());
Dtype* mutable_gpu_data(); // static_cast&amp;lt;Dtype*&amp;gt;(data_-&amp;gt;mutable_gpu_data());
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;1&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;3&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;4&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Caffe中通过上述方式来获取CPU和GPU上的数据区指针，在调用函数时，&lt;code&gt;SyncedMemory&lt;/code&gt;会自行判断是否需要同步数据（具体是如何判断的，在讲&lt;code&gt;SyncedMemory&lt;/code&gt;时再详细说明），当访问CPU（GPU）侧数据时，如果GPU（CPU）侧数据（可能）更新过，则将数据同步至CPU（GPU）。可参考下面示例代码来理解何时会发生数据同步，示例代码来自Caffe官网。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prism&#34;&gt;// Assuming that data are on the CPU initially, and we have a blob.
const Dtype* foo;
Dtype* bar;
foo = blob.gpu_data(); // data copied cpu-&amp;gt;gpu.
foo = blob.cpu_data(); // no data copied since both have up-to-date contents.
bar = blob.mutable_gpu_data(); // no data copied.
// ... some operations ...
bar = blob.mutable_gpu_data(); // no data copied when we are still on GPU.
foo = blob.cpu_data(); // data copied gpu-&amp;gt;cpu, since the gpu side has modified the data
foo = blob.gpu_data(); // no data copied since both have up-to-date contents
bar = blob.mutable_cpu_data(); // still no data copied.
bar = blob.mutable_gpu_data(); // data copied cpu-&amp;gt;gpu.
bar = blob.mutable_cpu_data(); // data copied gpu-&amp;gt;cpu.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;1&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;3&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;4&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;5&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;6&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;7&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;8&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;9&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;10&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;11&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;12&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;13&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;只要调用了&lt;code&gt;mutable&lt;/code&gt;函数，即便没有实际修改数据，再调用另一侧的&lt;code&gt;mutable&lt;/code&gt;函数，也会发生数据同步。因此，在明确不修改数据时，尽量调用&lt;code&gt;const&lt;/code&gt;函数，只有在操纵数据时才调用&lt;code&gt;mutable&lt;/code&gt;函数。&lt;/p&gt;

&lt;h1 id=&#34;主要成员函数&#34;&gt;主要成员函数&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;Blob&lt;/code&gt;的主要成员函数有：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;基本函数，包括构造函数、set和get类函数、逻辑判断等&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Reshape&lt;/code&gt;函数，用于设置&lt;code&gt;Blob&lt;/code&gt;的&lt;code&gt;shape&lt;/code&gt;，分配内存&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Update&lt;/code&gt;函数，用于在网络训练时更新参数使用，&lt;nobr aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;math&#34; id=&#34;MathJax-Span-341&#34; style=&#34;width: 7.799em; display: inline-block;&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 7.799em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1007.82em, 4.34em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-342&#34;&gt;&lt;span style=&#34;display: inline-block; position: relative; width: 7.799em; height: 0px;&#34;&gt;&lt;span style=&#34;position: absolute; clip: rect(3.152em, 1007.82em, 4.34em, -1000.01em); top: -3.973em; left: 0em;&#34;&gt;&lt;span class=&#34;semantics&#34; id=&#34;MathJax-Span-343&#34;&gt;&lt;span class=&#34;mrow&#34; id=&#34;MathJax-Span-344&#34;&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-345&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;d&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-346&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-347&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;t&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-348&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-349&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.312em;&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-350&#34; style=&#34;font-family: STIXGeneral-Italic; padding-left: 0.312em;&#34;&gt;d&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-351&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-352&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;t&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.003em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-353&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mo&#34; id=&#34;MathJax-Span-354&#34; style=&#34;font-family: STIXGeneral-Regular; padding-left: 0.261em;&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-355&#34; style=&#34;font-family: STIXGeneral-Italic; padding-left: 0.261em;&#34;&gt;d&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.054em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-356&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-357&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;f&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.157em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34; id=&#34;MathJax-Span-358&#34; style=&#34;font-family: STIXGeneral-Italic;&#34;&gt;f&lt;span style=&#34;display: inline-block; overflow: hidden; height: 1px; width: 0.157em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; width: 0px; height: 3.978em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display: inline-block; overflow: hidden; vertical-align: -0.256em; border-left: 0px solid; width: 0px; height: 0.984em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;      data = data - diff&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;data=data−diff&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Blob&lt;/code&gt;运算函数，用于切片统计、求L1范数、L2范数、数乘等&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;辅助函数，proto导入导出等&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下面重点介绍其中主要的成员函数。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prism&#34;&gt;template &amp;lt;typename Dtype&amp;gt;
class Blob {
 public:
  Blob()
       : data_(), diff_(), count_(0), capacity_(0) {}

  /// @brief Deprecated; use &amp;lt;code&amp;gt;Blob(const vector&amp;lt;int&amp;gt;&amp;amp; shape)&amp;lt;/code&amp;gt;.
  explicit Blob(const int num, const int channels, const int height,
      const int width);
  explicit Blob(const vector&amp;lt;int&amp;gt;&amp;amp; shape);
// ......
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;1&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;3&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;4&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;5&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;6&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;7&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;8&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;9&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;10&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;11&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;12&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在&lt;code&gt;Blob&lt;/code&gt;的构造函数中，会调用&lt;code&gt;Reshape&lt;/code&gt;函数，给&lt;code&gt;shape&lt;/code&gt;成员变量赋值以及分配初始内存。在&lt;code&gt;Layer::Reshape&lt;/code&gt;或者&lt;code&gt;Layer::Forward&lt;/code&gt;时，也会调用&lt;code&gt;Reshape&lt;/code&gt;函数来设置输出&lt;code&gt;Blob&lt;/code&gt;的维度，如果reshape了整个网络的输入&lt;code&gt;Blob&lt;/code&gt;，则需要调用&lt;code&gt;Net::Forward&lt;/code&gt;或者&lt;code&gt;Net::Reshape&lt;/code&gt;来重新确定每一层相关&lt;code&gt;Blob&lt;/code&gt;的shape（从bottom到top逐层推算得出）。当&lt;code&gt;Blob&lt;/code&gt; size发生改变时，只有在内存不够才会再分配内存，具体代码如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prism&#34;&gt;template &amp;lt;typename Dtype&amp;gt;
bool Blob&amp;lt;Dtype&amp;gt;::Reshape(const vector&amp;lt;int&amp;gt;&amp;amp; shape) {
  CHECK_LE(shape.size(), kMaxBlobAxes);
  count_ = 1;
  shape_.resize(shape.size());
  if (!shape_data_ || shape_data_-&amp;gt;size() &amp;lt; shape.size() * sizeof(int)) {
    shape_data_.reset(new SyncedMemory(shape.size() * sizeof(int)));
  }
  int* shape_data = static_cast&amp;lt;int*&amp;gt;(shape_data_-&amp;gt;mutable_cpu_data());
  for (int i = 0; i &amp;lt; shape.size(); ++i) {
    CHECK_GE(shape[i], 0);
    if (count_ != 0) {
      CHECK_LE(shape[i], INT_MAX / count_) &amp;lt;&amp;lt; &amp;quot;blob size exceeds INT_MAX&amp;quot;;
    }
    count_ *= shape[i];
    shape_[i] = shape[i];
    shape_data[i] = shape[i];
  }
  // 不够时分配内存，原内存会释放（shared_ptr）
  if (count_ &amp;gt; capacity_) { 
    capacity_ = count_;
    data_.reset(new SyncedMemory(capacity_ * sizeof(Dtype)));
    diff_.reset(new SyncedMemory(capacity_ * sizeof(Dtype)));
    return true;
  }
  else {
    return false;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;1&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;3&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;4&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;5&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;6&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;7&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;8&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;9&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;10&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;11&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;12&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;13&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;14&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;15&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;16&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;17&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;18&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;19&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;20&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;21&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;22&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;23&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;24&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;25&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;26&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;27&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;28&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;29&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在网络训练阶段，根据损失函数以及反向传播得到的梯度，获得每层参数的更新量&lt;code&gt;diff_&lt;/code&gt;，会调用&lt;code&gt;Update&lt;/code&gt;函数来更新参数，如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prism&#34;&gt;template &amp;lt;typename Dtype&amp;gt;
void Blob&amp;lt;Dtype&amp;gt;::Update() {
  // We will perform update based on where the data is located.
  switch (data_-&amp;gt;head()) {
  case SyncedMemory::HEAD_AT_CPU:
    // perform computation on CPU
    // data = data - diff, axpy: y = ax + y
    caffe_axpy&amp;lt;Dtype&amp;gt;(count_, Dtype(-1),
        static_cast&amp;lt;const Dtype*&amp;gt;(diff_-&amp;gt;cpu_data()),
        static_cast&amp;lt;Dtype*&amp;gt;(data_-&amp;gt;mutable_cpu_data()));
    break;
  case SyncedMemory::HEAD_AT_GPU:
  case SyncedMemory::SYNCED:
#ifndef CPU_ONLY
    // perform computation on GPU
    caffe_gpu_axpy&amp;lt;Dtype&amp;gt;(count_, Dtype(-1),
        static_cast&amp;lt;const Dtype*&amp;gt;(diff_-&amp;gt;gpu_data()),
        static_cast&amp;lt;Dtype*&amp;gt;(data_-&amp;gt;mutable_gpu_data()));
#else
    NO_GPU;
#endif
    break;
  default:
    LOG(FATAL) &amp;lt;&amp;lt; &amp;quot;Syncedmem not initialized.&amp;quot;;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;1&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;3&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;4&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;5&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;6&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;7&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;8&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;9&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;10&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;11&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;12&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;13&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;14&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;15&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;16&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;17&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;18&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;19&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;20&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;21&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;22&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;23&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;24&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;25&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;26&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;27&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;值得一提的是，&lt;code&gt;Blob&lt;/code&gt;维度索引支持负数，-1表示最后一个维度，与Python相同，实现代码如下，在需要访问某个维度时，先使用&lt;code&gt;CanonicalAxisIndex&lt;/code&gt;获得真正维度，比如&lt;code&gt;CanonicalAxisIndex(-1)&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prism&#34;&gt;// axis_index the axis index.
// If 0 &amp;lt;= index &amp;lt; num_axes(), return index.
// If -num_axes &amp;lt;= index &amp;lt;= -1, return (num_axes() - (-index))
inline int CanonicalAxisIndex(int axis_index) const {
  CHECK_GE(axis_index, -num_axes())
      &amp;lt;&amp;lt; &amp;quot;axis &amp;quot; &amp;lt;&amp;lt; axis_index &amp;lt;&amp;lt; &amp;quot; out of range for &amp;quot; &amp;lt;&amp;lt; num_axes()
      &amp;lt;&amp;lt; &amp;quot;-D Blob with shape &amp;quot; &amp;lt;&amp;lt; shape_string();
  CHECK_LT(axis_index, num_axes())
      &amp;lt;&amp;lt; &amp;quot;axis &amp;quot; &amp;lt;&amp;lt; axis_index &amp;lt;&amp;lt; &amp;quot; out of range for &amp;quot; &amp;lt;&amp;lt; num_axes()
      &amp;lt;&amp;lt; &amp;quot;-D Blob with shape &amp;quot; &amp;lt;&amp;lt; shape_string();
  if (axis_index &amp;lt; 0) {
    return axis_index + num_axes();
  }
  return axis_index;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;1&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;3&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;4&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;5&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;6&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;7&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;8&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;9&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;10&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;11&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;12&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;13&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;14&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;15&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他函数，只取代表。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-prism&#34;&gt;// set get
// 省略基本的set和get函数，如上面提到的const和mutable函数
// 返回(n, c, h, w)处的数据，return cpu_data()[offset(n, c, h, w)]
inline Dtype data_at(const int n, const int c, const int h, const int w) const;
inline Dtype diff_at(const int n, const int c, const int h, const int w) const;
void ShareData(const Blob&amp;amp; other); // 与另一Blob共享data，类似浅拷贝
void ShareDiff(const Blob&amp;amp; other); // 与另一Blob共享diff
// 从另一Blob拷贝，类似深拷贝
void Blob&amp;lt;Dtype&amp;gt;::CopyFrom(const Blob&amp;amp; source, bool copy_diff, bool reshape); 

// 切片元素数量统计，count *= shape(i)
inline int count(int start_axis, int end_axis) const; 

// proto序列化与反序列化
void FromProto(const BlobProto&amp;amp; proto, bool reshape = true); // 从proto导入
void ToProto(BlobProto* proto, bool write_diff = false) const; // 导出为proto

// 运算
Dtype asum_data() const; // data L1 norm
Dtype asum_diff() const; // diff L1 norm
Dtype sumsq_data() const; // data L2 norm
Dtype sumsq_diff() const; // diff L2 norm
void scale_data(Dtype scale_factor); // data 数乘，in place
void scale_diff(Dtype scale_factor); // diff 数乘，in place

// 逻辑判断
bool ShapeEquals(const BlobProto&amp;amp; other); // 判断shape是否相同
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上。&lt;/p&gt;

&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://caffe.berkeleyvision.org/tutorial/net_layer_blob.html&#34; target=&#34;_blank&#34;&gt;Blobs, Layers, and Nets: anatomy of a Caffe model&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki2.org/en/Row-major_order&#34; target=&#34;_blank&#34;&gt;Row- and column-major order&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/BVLC/caffe&#34; target=&#34;_blank&#34;&gt;Caffe: a fast open framework for deep learning&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
        <item>
            <title>hi3516 himix200 opencv2</title>
            <link>/hardware/hisilicon/cross_compile/hi3516-himix200-opencv2/</link>
            <pubDate>Sun, 23 Feb 2020 18:57:35 CST</pubDate>
            <author>rinetd</author>
            <guid>/hardware/hisilicon/cross_compile/hi3516-himix200-opencv2/</guid>
            <description>

&lt;p&gt;三 生成可调试版本的程序&lt;/p&gt;

&lt;p&gt;1 使用CMAKE编译确实很方便。但CMAKE默认编译出来的程序不带有符号文件，用GDB无法调试。&lt;br /&gt;
2 要编译时产生符号文件供调试，调用CMAKE时，带上 -DCMAKE_BUILD_TYPE=Debug&lt;/p&gt;

&lt;p&gt;例如：在build文件中输入：&lt;br /&gt;
cmake .. -DCMAKE_BUILD_TYPE=Debug&lt;br /&gt;
这样产生的makefile文件make生成的可执行文件就带有调试信息，供gdb和gdbserver使用了。&lt;br /&gt;
****另外有另一种更好的方法是在工程主CMakeLists.txt中的PROJECT语句后加入一句&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SET(CMAKE_BUILD_TYPE Debug)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;CMake 中有一个变量 CMAKE_BUILD_TYPE ,可以的取值是 Debug Release RelWithDebInfo 和 MinSizeRel。当这个变量值为 Debug 的时候,CMake 会使用变量 CMAKE_CXX_FLAGS_DEBUG 和 CMAKE_C_FLAGS_DEBUG 中的字符串作为编译选项生成 Makefile ,当这个变量值为 Release 的时候,工程会使用变量 CMAKE_CXX_FLAGS_RELEASE 和 CMAKE_C_FLAGS_RELEASE 选项生成 Makefile。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CMake 需要重点记住的命令和量&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一  MESSAGE 命令&lt;/p&gt;

&lt;p&gt;MESSAGE(STATUS &amp;quot;THIS IS A BINARY DIR&amp;quot; ${HELLO_BINARY_DIR})&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;STATUS 表示将要输出前缀为“--”的信息，可以替换为
FATAL_ERROR:立即终止CMake过程
SEND_ERROR:产生错误，生成过程被跳过
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;错误处理&#34;&gt;错误处理&lt;/h3&gt;

&lt;p&gt;/usr/include/glib-2.0/glib/gtypes.h:423:3: error: size of array &#39;_GStaticAssertCompileTimeAssertion_0&#39; is negative&lt;br /&gt;
   G_STATIC_ASSERT(sizeof (unsigned long long) == sizeof (guint64));&lt;br /&gt;
   ^&lt;br /&gt;
然后去掉arm没有的东西&lt;br /&gt;
例如with_tiff、with_CUDA、with_GTK、with_libv4l&lt;br /&gt;
-DWITH_LIBV4L=OFF   -DWITH_GTK=OFF&lt;/p&gt;

&lt;h3 id=&#34;错误2&#34;&gt;错误2&lt;/h3&gt;

&lt;p&gt;/usr/include/x86_64-linux-gnu/gnu/stubs.h:7:27: fatal error: gnu/stubs-32.h: No such file or directory&lt;br /&gt;
 # include &lt;gnu/stubs-32.h&gt;&lt;/p&gt;

&lt;p&gt;解决方式： 启用stdc++&lt;br /&gt;
CMAKE_CXX_FLAGS &amp;quot;-std=c++11 -march=armv7-a -mfloat-abi=softfp -mfpu=neon-vfpv4 -fopenmp ${CMAKE_CXX_FLAGS}&amp;quot;&lt;/p&gt;

&lt;p&gt;1.确保ubuntu能上网&lt;/p&gt;

&lt;p&gt;2.安装cmake&lt;br /&gt;
代码: 全选&lt;br /&gt;
sudo apt-get install cmake-gui&lt;/p&gt;

&lt;p&gt;3.下载opencv2.4.9 Linux版源码，不要用最新的3.0.0&lt;br /&gt;
&lt;a href=&#34;http://opencv.org/downloads.html&#34; target=&#34;_blank&#34;&gt;http://opencv.org/downloads.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;/home/ubuntu/cpp/3rdpart&lt;/p&gt;

&lt;p&gt;cmake  -DCMAKE_BUILD_TYPE=RELEASE  &lt;br /&gt;
-DCMAKE_C_COMPILER=arm-himix200-linux-gcc &lt;br /&gt;
-DCMAKE_CXX_COMPILER=arm-himix200-linux-g++ &lt;br /&gt;
-DCMAKE_INSTALL_PREFIX=~/cpp/3rdpart/libopencv2/lib &lt;br /&gt;
-DCMAKE_INSTALL_INCLUDEDIR=~/cpp/3rdpart/libopencv2/include &lt;br /&gt;
-DCMAKE_EXE_LINKER_FLAGS=-lpthread -ldl &lt;br /&gt;
-DBUILD_SHARED_LIBS=ON &lt;br /&gt;
-DCMAKE_CXX_FLAGS=&amp;quot;-std=c++11 -fPIC&amp;quot; &lt;br /&gt;
-DCMAKE_C_FLAGS=&amp;quot;-std=c++11 -fPIC&amp;quot; &lt;br /&gt;
-DENABLE_PIC=ON &lt;br /&gt;
-DWITH_1394=OFF &lt;br /&gt;
-DWITH_GTK=OFF  -DWITH_LIBV4L=OFF -DWITH_OPENGL=OFF ..&lt;/p&gt;

&lt;h3 id=&#34;精简&#34;&gt;精简&lt;/h3&gt;

&lt;p&gt;cmake -DCMAKE_BUILD_TYPE=RELEASE  &lt;br /&gt;
-DCMAKE_INSTALL_PREFIX=../output  &lt;br /&gt;
-DCMAKE_C_COMPILER=arm-himix200-linux-gcc &lt;br /&gt;
-DCMAKE_CXX_COMPILER=arm-himix200-linux-g++ &lt;br /&gt;
-DCMAKE_EXE_LINKER_FLAGS=-lrt -lpthread &lt;br /&gt;
-DBUILD_SHARED_LIBS=OFF &lt;br /&gt;
-DWITH_CUDA=OFF &lt;br /&gt;
-DWITH_CUFFT=OFF &lt;br /&gt;
-DWITH_EIGEN=OFF &lt;br /&gt;
-DWITH_FFMPEG=OFF &lt;br /&gt;
-DWITH_OPENCL=OFF &lt;br /&gt;
-DWITH_OPENCLAMDBLAS=OFF &lt;br /&gt;
-DWITH_OPENCLAMDFFT=OFF &lt;br /&gt;
-DWITH_OPENCL_SVM=OFF &lt;br /&gt;
-DWITH_TIFF=OFF &lt;br /&gt;
-DWITH_1394=OFF &lt;br /&gt;
-DWITH_GSTREAMER=OFF &lt;br /&gt;
-DWITH_JASPER=OFF &lt;br /&gt;
-DWITH_LAPACK=OFF &lt;br /&gt;
-DWITH_MATLAB=OFF &lt;br /&gt;
-DWITH_WEBP=OFF &lt;br /&gt;
-DWITH_IPP=OFF &lt;br /&gt;
-DWITH_PNG=ON &lt;br /&gt;
-DWITH_JASPER=ON &lt;br /&gt;
-DWITH_JPEG=ON &lt;br /&gt;
-DHISI3559A=1 &lt;br /&gt;
-DWITH_PNG=ON &lt;br /&gt;
-DBUILD_TESTS=OFF &lt;br /&gt;
-DBUILD_opencv_core=ON &lt;br /&gt;
-DBUILD_opencv_imgcodecs=ON &lt;br /&gt;
-DBUILD_opencv_imgproc=ON &lt;br /&gt;
-DWITH_V4L=OFF -DWITH_LIBV4L=OFF &lt;br /&gt;
-DWITH_GTK=OFF &lt;br /&gt;
-DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER &lt;br /&gt;
-DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY &lt;br /&gt;
-DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY &lt;br /&gt;
-DBUILD_opencv_apps=off &lt;br /&gt;
-DBUILD_opencv_calib3d=off &lt;br /&gt;
-DBUILD_opencv_contrib=off &lt;br /&gt;
-DBUILD_opencv_features2d=off &lt;br /&gt;
-DBUILD_opencv_flann=off &lt;br /&gt;
-DBUILD_opencv_gpu=off &lt;br /&gt;
-DBUILD_opencv_java=off &lt;br /&gt;
-DBUILD_opencv_legacy=off &lt;br /&gt;
-DBUILD_opencv_ml=off &lt;br /&gt;
-DBUILD_opencv_nonfree=off &lt;br /&gt;
-DBUILD_opencv_objdetect=off &lt;br /&gt;
-DBUILD_opencv_ocl=off &lt;br /&gt;
-DBUILD_opencv_photo=off &lt;br /&gt;
-DBUILD_opencv_python=off &lt;br /&gt;
-DBUILD_opencv_stitching=off &lt;br /&gt;
-DBUILD_opencv_superres=off &lt;br /&gt;
-DBUILD_opencv_ts=off &lt;br /&gt;
-DBUILD_opencv_video=off &lt;br /&gt;
-DBUILD_opencv_videostab=off &lt;br /&gt;
-DBUILD_opencv_world=off &lt;br /&gt;
-DBUILD_opencv_lengcy=off &lt;br /&gt;
-DBUILD_opencv_lengcy=off &lt;br /&gt;
-DWITH_1394=off &lt;br /&gt;
-DWITH_EIGEN=off &lt;br /&gt;
-DWITH_FFMPEG=off &lt;br /&gt;
-DWITH_GIGEAPI=off &lt;br /&gt;
-DWITH_GSTREAMER=off &lt;br /&gt;
-DWITH_GTK=off &lt;br /&gt;
-DWITH_PVAPI=off &lt;br /&gt;
-DWITH_V4L=off &lt;br /&gt;
-DWITH_LIBV4L=off &lt;br /&gt;
-DWITH_CUDA=off &lt;br /&gt;
-DWITH_CUFFT=off &lt;br /&gt;
-DWITH_OPENCL=off &lt;br /&gt;
-DWITH_OPENCLAMDBLAS=off &lt;br /&gt;
-DWITH_OPENCLAMDFFT=off ..&lt;br /&gt;
..&lt;br /&gt;
-D BUILD_ZLIB=ON -D ZLIB_INCLUDE_DIR=../3rdparty/zlib&lt;br /&gt;
-DZLIB_INCLUDE_DIR=/home/sdc/yuwy/opencv/opencv-3.2.0/3rdparty/zlib &lt;br /&gt;
..&lt;/p&gt;

&lt;p&gt;toolchains/himix200.toolchain.cmake&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# set cross-compiled system type, it&#39;s better not use the type which cmake cannot recognized.
SET ( CMAKE_SYSTEM_NAME Linux )
SET ( CMAKE_SYSTEM_PROCESSOR arm )
# when hislicon SDK was installed, toolchain was installed in the path as below: 
SET ( CMAKE_C_COMPILER /opt/hisi-linux/x86-arm/arm-himix200-linux/bin/arm-himix200-linux-gcc )
SET ( CMAKE_CXX_COMPILER /opt/hisi-linux/x86-arm/arm-himix200-linux/bin/arm-himix200-linux-g++ )

# set searching rules for cross-compiler
SET ( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER )
SET ( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY )
SET ( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY )

# set ${CMAKE_C_FLAGS} and ${CMAKE_CXX_FLAGS}flag for cross-compiled process
SET ( CROSS_COMPILATION_ARM himix200 )
SET ( CROSS_COMPILATION_ARCHITECTURE armv7-a )

# set g++ param
SET ( CMAKE_CXX_FLAGS &amp;quot;-std=c++11 -march=armv7-a -mfloat-abi=softfp -mfpu=neon-vfpv4 -fopenmp ${CMAKE_CXX_FLAGS}&amp;quot; )

add_definitions(-D__ARM_NEON)
add_definitions(-D__ANDROID__)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;cmake -DCMAKE_BUILD_TYPE=RELEASE  &lt;br /&gt;
                          -DCMAKE_C_COMPILER=arm-himix200-linux-gcc &lt;br /&gt;
                          -DCMAKE_CXX_COMPILER=arm-himix200-linux-g++ &lt;br /&gt;
                          -DBUILD_SHARED_LIBS=ON &lt;br /&gt;
                          -DCMAKE_CXX_FLAGS=&amp;quot;-std=c++11 -march=armv7-a -mfloat-abi=softfp -mfpu=neon-vfpv4 -fopenmp -fPIC&amp;quot; &lt;br /&gt;
                          -DCMAKE_C_FLAGS=&amp;quot;-std=c++11 -march=armv7-a -mfloat-abi=softfp -mfpu=neon-vfpv4 -fopenmp -fPIC&amp;quot; &lt;br /&gt;
                          -DCMAKE_EXE_LINKER_FLAGS=-lpthread -ldl &lt;br /&gt;
                          -DENABLE_PIC=ON &lt;br /&gt;
                          -DWITH_1394=OFF &lt;br /&gt;
                          -DWITH_ARAVIS=OFF &lt;br /&gt;
                          -DWITH_ARITH_DEC=ON &lt;br /&gt;
                          -DWITH_ARITH_ENC=ON &lt;br /&gt;
                          -DWITH_CLP=OFF &lt;br /&gt;
                          -DWITH_CUBLAS=OFF &lt;br /&gt;
-DWITH_LIBV4L=OFF -DWITH_GTK=OFF&lt;br /&gt;
                         -DWITH_CUDA=OFF &lt;br /&gt;
                         -DWITH_CUFFT=OFF &lt;br /&gt;
                         -DWITH_FFMPEG=OFF &lt;br /&gt;
                         -DWITH_GSTREAMER=OFF &lt;br /&gt;
                         -DWITH_GSTREAMER_0_10=OFF &lt;br /&gt;
                         -DWITH_HALIDE=OFF &lt;br /&gt;
                        -DWITH_HPX=OFF &lt;br /&gt;
                        -DWITH_IMGCODEC_HDR=ON &lt;br /&gt;
                        -DWITH_IMGCODEC_PXM=ON &lt;br /&gt;
                        -DWITH_IMGCODEC_SUNRASTER=ON &lt;br /&gt;
                        -DWITH_INF_ENGINE=OFF &lt;br /&gt;
                        -DWITH_IPP=OFF &lt;br /&gt;
                        -DWITH_ITT=OFF &lt;br /&gt;
                        -DWITH_JASPER=ON &lt;br /&gt;
                        -DWITH_JPEG=ON &lt;br /&gt;
                        -DWITH_LAPACK=ON &lt;br /&gt;
                        -DWITH_LIBREALSENSE=OFF &lt;br /&gt;
                        -DWITH_NVCUVID=OFF &lt;br /&gt;
                        -DWITH_OPENCL=OFF &lt;br /&gt;
                       -DWITH_OPENCLAMDBLAS=OFF &lt;br /&gt;
                       -DWITH_OPENCLAMDFFT=OFF &lt;br /&gt;
                       -DWITH_OPENCL_SVM=OFF &lt;br /&gt;
                       -DWITH_OPENEXR=OFF &lt;br /&gt;
                       -DWITH_OPENGL=OFF &lt;br /&gt;
                       -DWITH_OPENMP=OFF &lt;br /&gt;
                      -DWITH_OPENNNI=OFF &lt;br /&gt;
                      -DWITH_OPENNNI2=OFF &lt;br /&gt;
                      -DWITH_OPENVX=OFF &lt;br /&gt;
                      -DWITH_PNG=OFF &lt;br /&gt;
                      -DWITH_PROTOBUF=OFF &lt;br /&gt;
                      -DWITH_PTHREADS_PF=ON &lt;br /&gt;
                      -DWITH_PVAPI=OFF &lt;br /&gt;
                      -DWITH_QT=OFF &lt;br /&gt;
                      -DWITH_QUIRC=OFF &lt;br /&gt;
                      -DWITH_TBB=OFF &lt;br /&gt;
                      -DWITH_TIFF=ON &lt;br /&gt;
                      -DWITH_VULKAN=OFF &lt;br /&gt;
                      -DWITH_WEBP=ON &lt;br /&gt;
                      -DWITH_XIMEA=OFF &lt;br /&gt;
                      ..&lt;/p&gt;

&lt;p&gt;7.进入build目录执行make&lt;br /&gt;
代码: 全选&lt;br /&gt;
xlab@xlab-dev:~/zhouhua/opencv/build$ make&lt;/p&gt;

&lt;p&gt;提示出错：&lt;br /&gt;
代码: 全选&lt;br /&gt;
../../lib/libopencv_core.so: undefined reference to &lt;code&gt;pthread_once&#39;
../../lib/libopencv_core.so: undefined reference to&lt;/code&gt;pthread_spin_lock&#39;&lt;br /&gt;
../../lib/libopencv_core.so: undefined reference to &lt;code&gt;pthread_spin_unlock&#39;
../../lib/libopencv_core.so: undefined reference to&lt;/code&gt;pthread_spin_init&#39;&lt;br /&gt;
../../lib/libopencv_core.so: undefined reference to &lt;code&gt;pthread_spin_trylock&#39;
../../lib/libopencv_core.so: undefined reference to&lt;/code&gt;pthread_spin_destroy&#39;&lt;/p&gt;

&lt;p&gt;修改CMakeCache.txt大约200行处&lt;br /&gt;
//Flags used by the linker.&lt;br /&gt;
CMAKE_EXE_LINKER_FLAGS:STRING= -lpthread -lrt&lt;br /&gt;
继续make&lt;br /&gt;
可能出现如下错误&lt;br /&gt;
代码: 全选&lt;br /&gt;
CMake Error at /home/xlab/zhouhua/opencv/opencv-2.4.9/cmake/cl2cpp.cmake:50 (string):&lt;br /&gt;
  string does not recognize sub-command MD5&lt;/p&gt;

&lt;p&gt;make[2]: *** [modules/ocl/opencl_kernels.cpp] Error 1&lt;br /&gt;
make[1]: *** [modules/ocl/CMakeFiles/opencv_ocl.dir/all] Error 2&lt;br /&gt;
make: *** [all] Error 2&lt;/p&gt;

&lt;p&gt;删除/home/xlab/zhouhua/opencv/opencv-2.4.9/cmake/cl2cpp.cmake的第50行的内容即可。&lt;br /&gt;
继续make&lt;br /&gt;
完成后执行make install&lt;br /&gt;
代码: 全选&lt;br /&gt;
xlab@xlab-dev:~/zhouhua/opencv/output$ ls&lt;br /&gt;
LICENSE  bin  include  lib  share&lt;/p&gt;

&lt;p&gt;8.得到了include和lib目录就可以编写程序了，来试试最常用的人脸检测吧&lt;br /&gt;
编写如下代码&lt;br /&gt;
代码: 全选&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;/***********Author:9crk 2014-12-24*****************************/
#include &amp;quot;cv.h&amp;quot;
#include &amp;quot;highgui.h&amp;quot;
#include &amp;quot;stdio.h&amp;quot;
/******************for time mesurement*************************/
#include &amp;lt;sys/time.h&amp;gt;
struct timeval tpstart,tpend;
unsigned long timeuses;
void timeRec()
{gettimeofday(&amp;amp;tpstart,0);
}
int timeRep()
{gettimeofday(&amp;amp;tpend,0);timeuses=(tpend.tv_sec-tpstart.tv_sec)*1000000+tpend.tv_usec-tpstart.tv_usec;printf(&amp;quot;use time: %uus\n&amp;quot;,timeuses);return timeuses;
}
/********************end**************************************/

int main(int argc, char* argv[])
{
   IplImage* img = NULL;
   IplImage* cutImg = NULL;
   CvMemStorage* storage = cvCreateMemStorage(0);
   CvHaarClassifierCascade* cascade = (CvHaarClassifierCascade*)cvLoad(&amp;quot;./haarcascade_frontalface_alt2.xml&amp;quot;, 0, 0, 0);
   CvSeq* faces;  img = cvLoadImage(argv[1], 0);
   timeRec();faces = cvHaarDetectObjects(img, cascade,  storage, 1.2, 2, 0, cvSize(25,25) );timeRep();if (faces-&amp;gt;total == 0){    printf(&amp;quot;no face!\n&amp;quot;);}cvSetImageROI(img, *((CvRect*)cvGetSeqElem( faces, 0)));cvSaveImage(&amp;quot;face.bmp&amp;quot;, img);   cvResetImageROI(img);printf(&amp;quot;face detected! in face.bmp!\n&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为了方便，直接将库和头文件拷贝到编译器的目录下去&lt;br /&gt;
代码: 全选&lt;br /&gt;
xlab@xlab-dev:~/zhouhua/opencv/mytest$ sudo cp ../output/lib/* /opt/hisi-linux-nptl/arm-hisiv100-linux/arm-hisiv100-linux-uclibcgnueabi/lib/&lt;br /&gt;
xlab@xlab-dev:~/zhouhua/opencv/mytest$sudo cp ../output/include/* /opt/hisi-linux-nptl/arm-hisiv100-linux/arm-hisiv100-linux-uclibcgnueabi/include/ -r&lt;/p&gt;

&lt;p&gt;然后编译：（由于版本比较高，用了opencv2的头文件，因此需要额外增加一个-I参数指定头文件目录）&lt;br /&gt;
代码: 全选&lt;br /&gt;
arm-hisiv100nptl-linux-g++ face.cpp -I/home/xlab/zhouhua/opencv/output/include/opencv -lopencv_highgui -lopencv_core -lopencv_imgproc -lpthread -lrt -lopencv_objdetect -o face&lt;/p&gt;

&lt;p&gt;会提示一些warning，不用管。&lt;br /&gt;
编译成功，然后拷贝人脸分类器文件过来。&lt;br /&gt;
代码: 全选&lt;br /&gt;
xlab@xlab-dev:~/zhouhua/opencv/mytest$ cp ../output/share/OpenCV/haarcascades/haarcascade_frontalface_alt2.xml ./&lt;/p&gt;

&lt;p&gt;再找个图片过来，我这里就用lena.jpg了。&lt;br /&gt;
然后nfs挂到开发板&lt;br /&gt;
到开发板端做软连接库到/lib目录下&lt;br /&gt;
代码: 全选&lt;br /&gt;
ln -s /mnt/nfs/zhouhua/opencv/output/lib/libopencv_imgproc.so /lib/libopencv_imgproc.so&lt;br /&gt;
ln -s /mnt/nfs/zhouhua/opencv/output/lib/libopencv_objdetect.so /lib/libopencv_objdetect.so&lt;br /&gt;
ln -s /mnt/nfs/zhouhua/opencv/output/lib/libopencv_highgui.so /lib/libopencv_highgui.so&lt;br /&gt;
ln -s /mnt/nfs/zhouhua/opencv/output/lib/libopencv_core.so /lib/libopencv_core.so&lt;/p&gt;

&lt;p&gt;然后到face所在的nfs目录去执行即可：&lt;/p&gt;

&lt;h1 id=&#34;face-lena-jpg&#34;&gt;./face lena.jpg&lt;/h1&gt;

&lt;p&gt;use time: 31532724us&lt;br /&gt;
face detected! in face.bmp!&lt;br /&gt;
由于参数没有优化，用了31秒才找到lena的脸。。&lt;/p&gt;

&lt;p&gt;9.速度优化&lt;br /&gt;
先修改一下图片长、宽为之前的1/4试试&lt;/p&gt;

&lt;h1 id=&#34;face-lena-jpg-1&#34;&gt;./face lena.jpg&lt;/h1&gt;

&lt;p&gt;smallImg w=128 h=128&lt;br /&gt;
use time: 1179871us&lt;br /&gt;
face detected! in face.bmp!&lt;br /&gt;
这次用了1.1秒&lt;/p&gt;

&lt;p&gt;再修改检测参数&lt;br /&gt;
faces = cvHaarDetectObjects(smallImg, cascade,  storage, 1.5, 4, 0, cvSize(25,25) );&lt;/p&gt;

&lt;h1 id=&#34;face-lena-jpg-2&#34;&gt;./face lena.jpg&lt;/h1&gt;

&lt;p&gt;smallImg w=128 h=128&lt;br /&gt;
use time: 578169us&lt;br /&gt;
face detected! in face.bmp!&lt;br /&gt;
这次用了578ms，检测出来的人脸大小是44x44的。&lt;/p&gt;

&lt;p&gt;一般的应用应该够了，注意，此测试是在nfs下，如果拷贝到板子，速度会更快，当然，修改参数后的漏检率还需要测试。&lt;/p&gt;

&lt;p&gt;下面贴出最后的代码（ps:之前的代码没有释放内存）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;/***********Author:9crk 2014-12-24*****************************/
#include &amp;quot;cv.h&amp;quot;
#include &amp;quot;highgui.h&amp;quot;
#include &amp;quot;stdio.h&amp;quot;
/******************for time mesurement*************************/
#include &amp;lt;sys/time.h&amp;gt;
struct timeval tpstart,tpend;
unsigned long timeuses;
void timeRec()
{gettimeofday(&amp;amp;tpstart,0);
}
int timeRep()
{gettimeofday(&amp;amp;tpend,0);timeuses=(tpend.tv_sec-tpstart.tv_sec)*1000000+tpend.tv_usec-tpstart.tv_usec;printf(&amp;quot;use time: %uus\n&amp;quot;,timeuses);return timeuses;
}
/********************end**************************************/
int main(int argc, char* argv[])
{
   IplImage* img = NULL;
   IplImage* cutImg = NULL;

   CvMemStorage* storage = cvCreateMemStorage(0);
   CvHaarClassifierCascade* cascade = (CvHaarClassifierCascade*)cvLoad(&amp;quot;./haarcascade_frontalface_alt2.xml&amp;quot;, 0, 0, 0);
   CvSeq* faces;//加载图像img = cvLoadImage(argv[1], 0);//缩放到1/4大小IplImage *smallImg = cvCreateImage(cvSize(img-&amp;gt;width/4, img-&amp;gt;height/4), 8, img-&amp;gt;nChannels);printf(&amp;quot;smallImg w=%d h=%d\n&amp;quot;, smallImg-&amp;gt;width, smallImg-&amp;gt;height);cvResize(img, smallImg);//检测并计时timeRec();faces = cvHaarDetectObjects(smallImg, cascade,  storage, 1.5, 4, 0, cvSize(25,25) );timeRep();
   if (faces-&amp;gt;total == 0){    printf(&amp;quot;no face!\n&amp;quot;);}//切取出头像cvSetImageROI(smallImg, *((CvRect*)cvGetSeqElem( faces, 0)));cvSaveImage(&amp;quot;face.bmp&amp;quot;, smallImg);   cvResetImageROI(smallImg);//释放内存cvReleaseImage(&amp;amp;img);cvReleaseImage(&amp;amp;smallImg);printf(&amp;quot;face detected! in face.bmp!\n&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;opencv-精简&#34;&gt;opencv 精简&lt;/h5&gt;

&lt;h2 id=&#34;1-在window上用cmake编译opencv-for-android&#34;&gt;1.在window上用cmake编译opencv for Android&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://link.jianshu.com/?t=http://blog.csdn.net/odongfangzhizi/article/details/70211085&#34; target=&#34;_blank&#34;&gt;编译Android平台的opencv&lt;/a&gt;&lt;br /&gt;
这里贴一下他的编译指令&lt;br /&gt;
cmake -G &amp;quot;Unix Makefiles&amp;quot; -DCMAKE_TOOLCHAIN_FILE=....\android\android.toolchain.cmake ......&lt;br /&gt;
-DANDROID_NDK=&amp;quot;D:\Android\sdk\ndk-bundle&amp;quot;&lt;br /&gt;
-DANDROID_TOOLCHAIN_NAME=arm-linux-androideabi-4.9&lt;br /&gt;
-DCMAKE_MAKE_PROGRAM=&amp;quot;D:\Android\sdk\ndk-bundle\prebuilt\windows-x86_64\bin\make.exe&amp;quot;&lt;/p&gt;

&lt;p&gt;cmake -G &amp;quot;Unix Makefiles&amp;quot;&lt;br /&gt;
-DCMAKE_BUILD_TYPE=Release&lt;br /&gt;
-DANDROID_ABI=&amp;quot;armeabi&amp;quot;&lt;br /&gt;
-DANDROID_NATIVE_API_LEVEL=14&lt;br /&gt;
-DANDROID_FORCE_ARM_BUILD=ON&lt;br /&gt;
-DWITH_CAROTENE=OFF&lt;br /&gt;
-DWITH_CLP=OFF&lt;br /&gt;
-DWITH_CUBLAS=OFF&lt;br /&gt;
-DWITH_CUDA=OFF&lt;br /&gt;
-DWITH_CUFFT=OFF&lt;br /&gt;
-DWITH_EIGEN=OFF&lt;br /&gt;
-DWITH_GDCM=OFF&lt;br /&gt;
-DWITH_GSTREAMER_0_10=OFF&lt;br /&gt;
-DWITH_JASPER=OFF&lt;br /&gt;
-DWITH_JPEG=OFF&lt;br /&gt;
-DWITH_NVCUVID=OFF&lt;br /&gt;
-DWITH_OPENCL=OFF&lt;br /&gt;
-DWITH_OPENCL_SVM=OFF&lt;br /&gt;
-DWITH_OPENEXR=OFF&lt;br /&gt;
-DWITH_OPENMP=OFF&lt;br /&gt;
-DWITH_OPENVX=OFF&lt;br /&gt;
-DWITH_PNG=ON&lt;br /&gt;
-DWITH_PTHREADS_PF=OFF&lt;br /&gt;
-DWITH_TBB=OFF&lt;br /&gt;
-DWITH_TIFF=OFF&lt;br /&gt;
-DWITH_WEBP=OFF&lt;br /&gt;
-DBUILD_ANDROID_EXAMPLES=OFF&lt;br /&gt;
-DBUILD_ANDROID_SERVICE=OFF&lt;br /&gt;
-DBUILD_CUDA_STUBS=OFF&lt;br /&gt;
-DBUILD_DOCS=OFF&lt;br /&gt;
-DBUILD_EXAMPLES=OFF&lt;br /&gt;
-DBUILD_FAT_JAVA_LIB=OFF&lt;br /&gt;
-DBUILD_JASPER=OFF&lt;br /&gt;
-DBUILD_JPEG=OFF&lt;br /&gt;
-DBUILD_OPENEXR=OFF&lt;br /&gt;
-DBUILD_PACKAGE=OFF&lt;br /&gt;
-DBUILD_PERF_TESTS=OFF&lt;br /&gt;
-DBUILD_PNG=ON&lt;br /&gt;
-DBUILD_SHARED_LIBS=OFF&lt;br /&gt;
-DBUILD_TBB=OFF&lt;br /&gt;
-DBUILD_TESTS=OFF&lt;br /&gt;
-DBUILD_TIFF=OFF&lt;br /&gt;
-DBUILD_WITH_DEBUG_INFO=OFF&lt;br /&gt;
-DBUILD_WITH_DYNAMIC_IPP=OFF&lt;br /&gt;
-DBUILD_opencv_apps=OFF&lt;br /&gt;
-DBUILD_opencv_calib3d=ON&lt;br /&gt;
-DBUILD_ZLIB=ON&lt;br /&gt;
&lt;strong&gt;-DBUILD_opencv_core=ON&lt;/strong&gt;&lt;br /&gt;
-DBUILD_opencv_features2d=ON&lt;br /&gt;
-DBUILD_opencv_flann=ON&lt;br /&gt;
-DBUILD_opencv_highgui=ON&lt;br /&gt;
-DBUILD_opencv_imgcodecs=ON&lt;br /&gt;
-DBUILD_opencv_imgproc=ON&lt;br /&gt;
-DBUILD_opencv_java=OFF&lt;br /&gt;
-DBUILD_opencv_ml=ON&lt;br /&gt;
-DBUILD_opencv_objdetect=OFF&lt;br /&gt;
-DBUILD_opencv_photo=OFF&lt;br /&gt;
-DBUILD_opencv_shape=OFF&lt;br /&gt;
-DBUILD_opencv_stitching=OFF&lt;br /&gt;
-DBUILD_opencv_stereo=OFF&lt;br /&gt;
-DBUILD_opencv_superres=OFF&lt;br /&gt;
-DBUILD_opencv_ts=OFF&lt;br /&gt;
-DBUILD_opencv_video=OFF&lt;br /&gt;
-DBUILD_opencv_videoio=OFF&lt;br /&gt;
-DBUILD_opencv_line_descriptor=OFF&lt;br /&gt;
-DBUILD_opencv_reg=OFF&lt;br /&gt;
-DBUILD_opencv_saliency=OFF&lt;br /&gt;
-DBUILD_opencv_videostab=OFF&lt;br /&gt;
-DBUILD_opencv_world=OFF&lt;br /&gt;
-DCMAKE_CXX_FLAGS=&amp;quot;-ffunction-sections&lt;br /&gt;
-fdata-sections -fvisibility=hidden -O3 -std=c++11 -mfloat-abi=softfp -mfpu=neon -march=armv7-a -mtune=cortex-a8&amp;quot;&lt;br /&gt;
-DCMAKE_C_FLAGS=&amp;quot;-ffunction-sections -fdata-sections -fvisibility=hidden -O3 -mfloat-abi=softfp -mfpu=neon -march=armv7-a -mtune=cortex-a8&amp;quot;&lt;br /&gt;
-DCMAKE_SHARED_LINKER_FLAGS=&amp;quot;-Wl,--gc-sections&amp;quot;&lt;br /&gt;
-DBUILD_opencv_xfeatures2d=OFF&lt;br /&gt;
-DBUILD_opencv_face=OFF&lt;br /&gt;
-DBUILD_opencv_bgsegm=OFF&lt;br /&gt;
-DBUILD_opencv_datasets=OFF&lt;br /&gt;
-DBUILD_opencv_dpm=OFF&lt;br /&gt;
-DBUILD_opencv_tracking=OFF&lt;br /&gt;
-DBUILD_opencv_xobjdetect=OFF&lt;br /&gt;
-DBUILD_opencv_optflow=OFF&lt;br /&gt;
-DBUILD_opencv_tracking=OFF&lt;br /&gt;
-DENABLE_NEON=ON&lt;br /&gt;
&lt;strong&gt;-DOPENCV_EXTRA_MODULES_PATH=&amp;quot;E:/opencv_contrib-3.2.0/modules&amp;quot;&lt;/strong&gt;&lt;br /&gt;
-DBUILD_opencv_ximgproc=ON&lt;br /&gt;
-DBUILD_opencv_dnn=OFF&lt;br /&gt;
-DBUILD_opencv_structured_light=OFF&lt;br /&gt;
-DBUILD_opencv_surface_matching=OFF&lt;br /&gt;
-DBUILD_opencv_text=OFF&lt;br /&gt;
-DBUILD_opencv_xphoto=OFF&lt;br /&gt;
-DBUILD_opencv_fuzzy=OFF&lt;br /&gt;
-DBUILD_opencv_bioinspired=OFF&lt;br /&gt;
-DBUILD_opencv_phase_unwrapping=OFF&lt;br /&gt;
-DBUILD_opencv_plot=OFF&lt;br /&gt;
-DBUILD_opencv_rgbd=OFF&lt;br /&gt;
-DBUILD_opencv_aruco=OFF&lt;/p&gt;

&lt;h2 id=&#34;2-编译出静态库供基本的使用&#34;&gt;2.编译出静态库供基本的使用&lt;/h2&gt;

&lt;p&gt;参考文章&lt;br /&gt;
&lt;a href=&#34;http://blog.csdn.net/10km/article/details/72972844&#34; target=&#34;_blank&#34;&gt;opencv2.4.9:为caffe编译精简的opencv_core,opencv_imgproc,opencv_highgui全静态库&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-opencv的core库的裁剪&#34;&gt;3.opencv的core库的裁剪&lt;/h2&gt;

&lt;p&gt;参考&lt;br /&gt;
&lt;a href=&#34;http://blog.csdn.net/xierhacker/article/details/52457907&#34; target=&#34;_blank&#34;&gt;OpenCV从入门到放弃(三):Core组件细讲&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;4-一些可能会用到的文章&#34;&gt;4.一些可能会用到的文章&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/cosmispower/article/details/60601151&#34; target=&#34;_blank&#34;&gt;opencv3.2+opencv_contrib+cmake&lt;/a&gt;   （源码编译，编出来的是window的）&lt;br /&gt;
&lt;a href=&#34;http://blog.csdn.net/w401229755/article/details/75810028&#34; target=&#34;_blank&#34;&gt;Android Studio Cmake &amp;amp; OpenCV3.2环境&lt;/a&gt;（基本集成，无源码编译）&lt;br /&gt;
&lt;a href=&#34;http://blog.csdn.net/martin20150405/article/details/53284442&#34; target=&#34;_blank&#34;&gt;使用Android Studio 2.2和Cmake （CMakeLists）让OpenCV 飞起来&lt;/a&gt;（基本集成，无源码编译）&lt;br /&gt;
&lt;a href=&#34;http://blog.csdn.net/martin20150405/article/details/54692386&#34; target=&#34;_blank&#34;&gt;ORB_SLAM2在Android上的移植过程 (Android Studio 2.2+OpenCV 3.2+Cmake)&lt;/a&gt;（如何集成其他的项目）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cjjjs.com/paper/xmkf/201641716212844.html&#34; target=&#34;_blank&#34;&gt;教你快速将大量代码文件加入到VS项目中&lt;/a&gt;&lt;br /&gt;
//待续&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;opencv2/opencv.hpp&amp;gt;
 
using namespace cv; 
 
int main( int argc, char** argv )  
{  
	Mat image;  
 
	image = imread( &amp;quot;test.jpeg&amp;quot;, 1 );  
	if( !image.data )  
	{  
		printf( &amp;quot;No image data \n&amp;quot; );  
		return -1;  
	}   
 
	cv::Point lu = cv::Point(180, 60); 
	cv::Point rd = cv::Point(400, 260);   
 
	cv::rectangle(image, lu, rd, cv::Scalar( 255, 20, 0 ), 1, CV_AA );                 	
 
	imwrite(&amp;quot;test_draw.jpeg&amp;quot;, image);        
 
	return 0;  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;arm-himix200-linux-g++ -o draw_image draw_image.cpp -I ./include/ -L./lib -lopencv_core  -lopencv_imgcodecs -lopencv_imgproc&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>handshke</title>
            <link>/post/handshke/</link>
            <pubDate>Sun, 23 Feb 2020 15:42:07 CST</pubDate>
            <author>rinetd</author>
            <guid>/post/handshke/</guid>
            <description>

&lt;p&gt;hs1qguklwhpdhfy265ufmeq7vkk5ms3tpnklvkdhex&lt;/p&gt;

&lt;h2 id=&#34;缘起&#34;&gt;缘起&lt;/h2&gt;

&lt;p&gt;这几天在朋友圈和微博看到很多收购 GitHub 账号的广告：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;收购 2019 年前注册的 GitHub 账号，并且有超过 16 个粉丝，且保留过私钥。绝不特殊目的，仅用于美化自己的简历。500块钱/个。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;作为技术人我们要拒绝中间商赚差价。&lt;/p&gt;

&lt;p&gt;其实这是 Handshake 搞得一次福利活动：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Handshake Organization raised money from top Silicon Valley investors including A16Z and Sequoia. They donated $10.2mm to GNU, Mozilla, and other internet foundations.&lt;/p&gt;

&lt;p&gt;Now they’re giving away ~4662 Handshake coins to qualifying developers on GitHub.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们经过 5 分钟的操作，大概可以获得零点几个比特币，价值人民币大概 5000 左右吧。官方说花费 3~5 分钟，实操可能需要半个多小时。官网有非常详细的教程：&lt;/p&gt;

&lt;p&gt;地址：&lt;a href=&#34;https://www.namebase.io/airdrop&#34; target=&#34;_blank&#34;&gt;https://www.namebase.io/airdrop&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;条件&#34;&gt;条件&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;注册过 GitHub 账号（时间不限）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在 2019 年 2 月 4 日前拥有至少 15 个粉丝&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2019 年 2 月 4 日之前添加的私钥，通常在电脑的 &lt;code&gt;~/.ssh/id_rsa&lt;/code&gt; 目录&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Node.js &amp;gt;= 8.0.0。因为领取的工具使用 JavaScript 开发的&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;有一个 Handshake 钱包地址。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;方式&#34;&gt;方式&lt;/h2&gt;

&lt;p&gt;如果你不满足前 3 个，就可以关闭这个页面了。&lt;/p&gt;

&lt;p&gt;如果你满足，下一步就是安装 Node.js。这个就不介绍了。&lt;/p&gt;

&lt;h3 id=&#34;注册账号&#34;&gt;注册账号&lt;/h3&gt;

&lt;p&gt;进入官网 &lt;a href=&#34;https://www.namebase.io&#34; target=&#34;_blank&#34;&gt;https://www.namebase.io&lt;/a&gt; 注册一个账号，官网有中文版。&lt;/p&gt;

&lt;p&gt;如图可以生成钱包地址。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ace.veilar.net/doc/1582212455580354.jpg&#34; alt=&#34;微信图片_20200220231737.jpg&#34; title=&#34;1582212455580354.jpg&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;领取&#34;&gt;领取&lt;/h2&gt;

&lt;p&gt;前置工作准备完了，进入正式领取的步骤：&lt;/p&gt;

&lt;h3 id=&#34;1-下载-hs-airdrop&#34;&gt;1. 下载 hs-airdrop&lt;/h3&gt;

&lt;p&gt;apt update &amp;amp;&amp;amp; apt install -y git npm&lt;br /&gt;
&lt;code&gt;$ git clone https://github.com/handshake-org/hs-airdrop.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个工具是开源的，而且是 handshake 团队开发的。因为后面会用的你的私钥，如果你不放心可以阅读工具源码。&lt;/p&gt;

&lt;h3 id=&#34;2-安装依赖&#34;&gt;2. 安装依赖&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;$ cd hs-airdrop &amp;amp;&amp;amp; npm install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;或者&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ cd hs-airdrop &amp;amp;&amp;amp; yarn&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-检查自己的私钥&#34;&gt;3. 检查自己的私钥&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;$ ls ~/.ssh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;一般情况下，私钥是 &lt;code&gt;~/.ssh/id_rsa&lt;/code&gt;，如果你的不是，记住私钥的位置。&lt;/p&gt;

&lt;h3 id=&#34;4-领取&#34;&gt;4. 领取&lt;/h3&gt;

&lt;p&gt;找到你上面生成的地址&lt;/p&gt;

&lt;p&gt;&lt;code&gt;./bin/hs-airdrop&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;比如我的命令是&lt;/p&gt;

&lt;p&gt;&lt;code&gt;./bin/hs-airdrop ~/.ssh/id_rsa hs1qnmm3nph8qzag4ypnsp6lhztzsk6x9f09zpjwr7 0.01&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;第一个参数是私钥地址。&lt;/p&gt;

&lt;p&gt;第二个参数是钱包地址。&lt;/p&gt;

&lt;p&gt;第三个参数 0.01 是手续费。默认是 0.1，推荐改成 0.01。&lt;/p&gt;

&lt;h3 id=&#34;成功&#34;&gt;成功&lt;/h3&gt;

&lt;p&gt;现在不少于 ~4662 个 HNS(Handshake coins) 币到手了。&lt;/p&gt;

&lt;p&gt;官方说的 3~5 分钟结束了。&lt;/p&gt;

&lt;p&gt;但这并没有结束，因为这这是 HNS 币，我们需要把他换成人民币。&lt;/p&gt;

&lt;p&gt;这需要 2 个步骤，以及 N 个前置条件。&lt;/p&gt;

&lt;h3 id=&#34;第一步-hns-转换为比特币-btc&#34;&gt;第一步：HNS 转换为比特币(BTC)&lt;/h3&gt;

&lt;p&gt;前置条件，需要认证。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开官网 &lt;a href=&#34;https://www.namebase.io/kyc/basic&#34; target=&#34;_blank&#34;&gt;https://www.namebase.io/kyc/basic&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;填写姓名，汉字或者拼音都无所谓。会问你是否为美国，选择 No。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;上传证件：护照或身份证。一般是身份证，选择 identity card。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;认证通过后，打开地址 &lt;a href=&#34;https://www.namebase.io/sell&#34; target=&#34;_blank&#34;&gt;https://www.namebase.io/sell&lt;/a&gt; 把你领取到的空气币换成比特币。&lt;/p&gt;

&lt;h3 id=&#34;第二步-比特币换人民币&#34;&gt;第二步：比特币换人民币&lt;/h3&gt;

&lt;p&gt;找一个国内比特币交易市场都可以完成此次操作。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>cmake 01</title>
            <link>/language/cpp/cmake-01/</link>
            <pubDate>Sun, 23 Feb 2020 09:23:27 CST</pubDate>
            <author>rinetd</author>
            <guid>/language/cpp/cmake-01/</guid>
            <description>

&lt;p&gt;这篇文章主要介绍如何一步一步自己写cmake文件。&lt;/p&gt;

&lt;h4 id=&#34;一-内部链接和外部链接&#34;&gt;一，内部链接和外部链接&lt;/h4&gt;

&lt;p&gt;在总文件夹下新建main.c&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//main.c
#include&amp;lt;stdio.h&amp;gt;
int main(){
    printf(&amp;quot;hello world from t1 main!\n&amp;quot;);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在同一目录下写好CMakeLists.txt（这个文件很重要，大小写有特殊要求，如果存在多个目录，要在每一个目录下面都要存在一个CMakeLists.txt)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PROJECT(HELLO)#新建项目
SET(SRC_LIST main.c)#把文件名指定为特殊字符 如果有多个，那么SET(SRC_LIST main.c t1.c t2.c)--&amp;gt;基本语法：参数之间用空格分开即可。
#指令是大小写无关的，但是参数和变量是大小写相关的。
MESSAGE(STATUS &amp;quot;this is BINARY dir&amp;quot; ${PROJECT_BINARY_DIR})#这里默认变量
MESSAGE(STATUS &amp;quot;this is  SOURCE dir&amp;quot; ${PROJECT_SOURCE_DIR})#这里是默认变量
#message 语法：SEND_ERROR:产生错误，生成过程被跳过。
#STATUS:输出前缀为-的信息。FATAL_ERROR：立刻终止cmake过程。
ADD_EXECUTABLE(hello ${SRC_LIST})#添加到编译生成的执行文件
#定义的这个工程会生成一个文件名字为hello的可执行文件
#对于变量的引用，只有在IF的情况下，变量才会被直接引用，其他时候都要加入${}才可以。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来输入:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cmake .
make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就生成执行文件.（以上为内部构建，比较冗长，容易生成很多无用的信息）&lt;/p&gt;

&lt;h5 id=&#34;外部构建&#34;&gt;外部构建&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;mkdir build
cd build
cmake ..
make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以在当前目录下获得目标文件hello。最大的好处是对原有工程没有任何影响，所有动作都全部发生在编译目录。&lt;br /&gt;
此时默认变量：PROJECT_SOURCE_DIR 依然是工程目录&lt;br /&gt;
但是 PROJECT_BINARY_DIR  在外部编译之后从原来的工程目录转化为工程目录/build&lt;/p&gt;

&lt;h4 id=&#34;二-多文件下的cmake与安装-外部构建&#34;&gt;二，多文件下的cmake与安装（外部构建）&lt;/h4&gt;

&lt;p&gt;文件分层：src--工程源码（main.c)  doc--工程文档  COPYRIGHT/README 放在根目录 bin--构建后目标文件所在的子目录&lt;br /&gt;
安装：我们要把编译得到的内容安装到/tmp/usr/test2 中&lt;br /&gt;
src下的main.c文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;
int main(){
    printf(&amp;quot;hello world from t1 main!\n&amp;quot;);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;src下的CMakeList.txt 文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
#设定变量的得到的编译执行文件输出到bin文件下。
#如果有编译好的lib文件，那么使用
#SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)
#在哪里加入ADD_EXECUTABLE or ADD_LIBRARY,在哪里写这两句话
ADD_EXECUTABLE(hello main.c)
install(TARGETS hello RUNTIME DESTINATION bin)
#安装目标文件（三种类型）可执行文件-RUNTIME 动态库-LIBRARY 静态库-ARCHIVE 
#example:
#INSTALL(TARGETS myrun mylib mystaticlib
#              RUNTIME DESTINATION bin
#              LIBRARY DESTINATION lib
#              ARCHIVE DESTINATION libstatic
#)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;根目录下的CMakeList.txt文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cmake_minimum_required(VERSION 3.5)
#确定最小版本号
PROJECT(HELLO)
install(FILES COPYRIGHT README DESTINATION share/doc/cmake/test2)
#安装普通文件
install(PROGRAMS runhello.sh DESTINATION bin)
#安装非目标文件的可执行程序
install(DIRECTORY doc/ DESTINATION share/doc/cmake/test2)
#安装文件夹
add_subdirectory(src)
#向当前工程添加存放源文件的子目录，并可以指定编译输出的结果
#add_subdirectory(source_dir [binary_dir]) 如果编译输出目录为空，那么就是build下的相同目录
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在安装之前，必须要定义安装的位置，否则将会默认为/usr/local&lt;br /&gt;
我们使用DCMAKE_INSTALL_PREFIX 定义&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cmake  -DCMAKE_INSTALL_PREFIX=/tmp/test2/usr  ..
make 
make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;静态库与动态库的构建&#34;&gt;静态库与动态库的构建&lt;/h4&gt;

&lt;p&gt;首先建立lib文件夹，写入hello.c 和 hello.h&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//hello.c
#include &amp;quot;hello.h&amp;quot;
void HelloFunc(){
    printf(&amp;quot;hello world in test3!\n&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;//hello.h
#ifndef HELLO_H
#define HELLO_H
#include &amp;lt;stdio.h&amp;gt;
void HelloFunc();
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;lib下的CMakeLists.txt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set(LIBHELLO_SRC hello.c)
add_library(hello SHARED ${LIBHELLO_SRC})
#生成共享库
add_library(hello_static STATIC ${LIBHELLO_SRC})
#生成静态库（这里不能重名，否则只能生成一个），不需要写全名
#SHARED 动态库 STATIC 静态库
set_target_properties(hello_static PROPERTIES OUTPUT_NAME &amp;quot;hello&amp;quot;)
#我希望输出的名字一样，所以要改变静态库的名字
set_target_properties(hello_static PROPERTIES CLEAN_DIRECT_OUTPUT 1)
set_target_properties(hello PROPERTIES CLEAN_DIRECT_OUTPUT 1)
#cmake会在构建新的target时候，尝试清理其他使用这个名字的库，我们要回避这个问题，所以要修改参数
set_target_properties(hello PROPERTIES VERSION 1.2 SOVERSION 1)
#设置动态库版本
get_target_property(OUTPUT_VALUE hello_static OUTPUT_NAME)
#获取输出名字的内容
message(STATUS &amp;quot;this is the hello_static output_name:&amp;quot;${OUTPUT_VALUE})
install(TARGETS hello hello_static 
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib)
#安装静态库和动态库
install(FILES hello.h DESTINATION include/hello)
#安装
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;主目录下的CMakeList.txt&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;project(HELLOLIB)
add_subdirectory(lib lib_HTF)
#如果要修改输出位置，可以在add_subdirectory 中设置或者在lib/CMakeList.txt中设置SET(LIBRARY_OUTPUT_PATH ...)中设置。
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;三-使用外部共享库和头文件&#34;&gt;三，使用外部共享库和头文件&lt;/h3&gt;

&lt;p&gt;在src文件下写入源文件 main.c :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;hello.h&amp;gt;
int main(){
    HelloFunc();
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编写src/CMakeLists.txt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;include_directories(/tmp/usr/test3/include/hello)
#添加包含目录
link_directories(/tmp/usr/test3/lib)
#添加库目录
add_executable(main hello.c)
#链接执行文件
target_link_libraries(main hello)
#添加执行文件下所需要的以来动态库
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编写根目录下的CMakeList.txt&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cmake_minimum_required(VERSION 3.5)
#设定cmake版本最小号
PROJECT(NEWHELLO)
EXEC_PROGRAM(ls ARGS &amp;quot;-l&amp;quot; OUTPUT_VARIABLE LS_OUTPUT RETUREN_VALUE LS_RVALUE)
#cmake中处理执行命令，args添加参数，output_variable为输出值，return_value为返回值
IF(NOT LS_RVALUE)
message(STATUS &amp;quot;ls result: &amp;quot;${LS_OUTPUT})
ENDIF(NOT LS_RVALUE)
aux_source_directory(. SRC_LIST)
#作用是发现一个目录下所有的源代码并将列表储存到一个变量中。
IF(NOT SRC_LIST)
message(STATUS &amp;quot;do not find any files&amp;quot;)
ENDIF(NOT SRC_LIST)
foreach(F ${SRC_LIST})
    message(${F})
endforeach(F)
#foreach循环 ，使用方法：
#1，foreach(F  ${SRC_LIST})
#2，foreach(VAR RANGE 10)
#3, foreach (loop_var RANGE start stop [step])
add_subdirectory(src)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果使用find的命令来查找，那么src/CMakeLists.txt 修改为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#export CMAKE_INCLUDE_PATH=/tmp/usr/test3/include/hello
#export CMAKE_LIBRARY_PATH=/tmp/usr/test3/lib
这个两句都是外部命令，也可以用下面来指定
find_path(myHeader hello.h /tmp/usr/test3/include/hello)
#查找文件位置是否存在
IF(myHeader)
message(STATUS ${myHeader})
include_directories(${myHeader})
ENDIF(myHeader)

find_library(myLib hello /tmp/usr/test3/lib)
查找lib是否存在
IF(myLib)
message(STATUS ${myLib})
ELSEIF(NOT myLib)
MESSAGE(FAULT &amp;quot;libhello not found&amp;quot;)
ENDIF(myLib)

add_executable(main hello.c)
target_link_libraries(main ${myLib})
#添加lib，这里应该是绝对路径了
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;四-cmake常用变量&#34;&gt;四，cmake常用变量&lt;/h4&gt;

&lt;p&gt;1，引用方式 &lt;img src=&#34;https://math.jianshu.com/math?formula=%7B%7D%20%EF%BC%8C%E5%8F%AA%E6%9C%89%E5%9C%A8IF%E6%83%85%E5%86%B5%E4%B8%8B%E6%89%8D%E7%9B%B4%E6%8E%A5%E7%94%A8%202%EF%BC%8C%E5%B8%B8%E7%94%A8%E5%8F%98%E9%87%8F%20CMAKE_BINARY_DIR%3DPROJECT_BINARY_DIR%3D%3Cprojectname%3E_BINARY_DIR%20CMAKE_SOURCE_DIR%3DPROJECT_SOURCE_DIR%3D%3Cprojectname%3E_SOURCE_DIR%20CMAKE_CURRENT_SOURCE_DIR%20%E5%BD%93%E5%89%8D%E5%A4%84%E7%90%86%E7%9A%84CMakeList%E6%89%80%E5%9C%A8%E8%B7%AF%E5%BE%84%20CMAKE_CURRENT_BINARY_DIR%EF%BC%8Cout-of-source%20%E4%B8%AD%E6%8C%87%E7%9A%84%E6%98%AFtarget%E7%BC%96%E8%AF%91%E8%B7%AF%E5%BE%84%203%EF%BC%8Ccmake%20%E8%B0%83%E7%94%A8%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&#34; alt=&#34;{} ，只有在IF情况下才直接用 2，常用变量 CMAKE_BINARY_DIR=PROJECT_BINARY_DIR=&amp;lt;projectname&amp;gt;_BINARY_DIR CMAKE_SOURCE_DIR=PROJECT_SOURCE_DIR=&amp;lt;projectname&amp;gt;_SOURCE_DIR CMAKE_CURRENT_SOURCE_DIR 当前处理的CMakeList所在路径 CMAKE_CURRENT_BINARY_DIR，out-of-source 中指的是target编译路径 3，cmake 调用环境变量&#34; /&gt;ENV{NAME} 可以直接调用环境变量&lt;br /&gt;
message(STATUS &amp;quot;home dir: $ENV{HOME}&amp;quot;)&lt;/p&gt;

&lt;h4 id=&#34;五-自定义模块和模块使用&#34;&gt;五，自定义模块和模块使用&lt;/h4&gt;

&lt;p&gt;一般使用FIND_PACKAGE(XXX)来使用模块&lt;br /&gt;
每一个模块都有这几个变量：&lt;br /&gt;
1，&lt;name&gt;_FOUND&lt;br /&gt;
2,&lt;name&gt;_INCLUDE_DIR or &lt;name&gt;_INCLUDES&lt;br /&gt;
3,&lt;name&gt;_LIBRARY or &lt;name&gt;_LIBRARIES&lt;/p&gt;

&lt;h5 id=&#34;编写属于自己的findhello-模块&#34;&gt;编写属于自己的FindHello 模块&lt;/h5&gt;

&lt;p&gt;建立cmake文件夹，编写cmake/FindHELLO.cmake 模块&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FIND_PATH(HELLO_INCLUDE_DIR hello.h /tmp/usr/test3/include/hello)
FIND_LIBRARY(HELLO_LIBRARY hello /tmp/usr/test3/lib)
IF(HELLO_INCLUDE_DIR AND HELLO_LIBRARY)
    SET(HELLO_FOUND TRUE)
ELSE(HELLO_INCLUDE_DIR AND HELLO_LIBRARY)
    message(STATUS &amp;quot;include: &amp;quot; ${HELLO_INCLUDE_DIR})
    message(STATUS &amp;quot;lib: &amp;quot; ${HELLO_LIBRARY})
ENDIF(HELLO_INCLUDE_DIR AND HELLO_LIBRARY)
IF(HELLO_FOUND)
    IF(NOT HELLO_FIND_QUIETLY)
#REQUIRED 参数，就是确定共享库是否必须
        message(STATUS &amp;quot;Found Hello: ${HELLO_LIBRARY}&amp;quot;)
    ENDIF(NOT HELLO_FIND_QUIETLY)
ELSE(HELLO_FOUND)
    IF(HELLO_FIND_REQUIRED)
        message(FATAL_ERROR &amp;quot;Could not find hello library&amp;quot;)
    ELSE(HELLO_FIND_REQUIRED)
        message(STATUS &amp;quot;in find_hello.cmake,we do not find hello lib&amp;quot;)
    ENDIF(HELLO_FIND_REQUIRED)
ENDIF(HELLO_FOUND)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;定义src/CMakeLists.txt&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)
#注意确定cmake module的路径
FIND_PACKAGE(HELLO)
#这里可以改为 FIND_PACKAGE(HELLO QUIET) or FIND_PACKAGE(HELLO REQUIRED)
IF(HELLO_FOUND)
    ADD_EXECUTABLE(hello main.c)
    include_directories(${HELLO_INCLUDE_DIR})
    target_link_libraries(hello ${HELLO_LIBRARY})
    message(STATUS &amp;quot;include: &amp;quot; ${HELLO_INCLUDE_DIR})
    message(STATUS &amp;quot;lib: &amp;quot; ${HELLO_LIBRARY})
ELSEIF(HELLO_FOUND)
    message(&amp;quot;do not find hello!&amp;quot;)
ENDIF(HELLO_FOUND)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;定义src/main.c&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include&amp;lt;hello.h&amp;gt;
int main(){
    HelloFunc();
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;主目录下的CMakeLists.txt&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cmake_minimum_required(VERSION 3.5)
project(HELLO)
add_subdirectory(src)
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
        <item>
            <title>cmake 02 static lib</title>
            <link>/language/cpp/cmake-02-static-lib/</link>
            <pubDate>Sun, 23 Feb 2020 09:16:27 CST</pubDate>
            <author>rinetd</author>
            <guid>/language/cpp/cmake-02-static-lib/</guid>
            <description>&lt;p&gt;组织为静态和动态库&lt;br /&gt;
通常的项目都会划分模块，模块以库的形式进行链接（动态或静态），在 cmake 中进行这一构建操作也是比较简单。&lt;/p&gt;

&lt;p&gt;还是原来的 helloworld 项目，现在从 helloworld3 拷贝到 helloworld4 。原来直接写在 main 中的输出部分，现在提取出一个 sayHello 函数供重复调用。&lt;/p&gt;

&lt;p&gt;增加一个 lib 目录，里面增加 hello.h 和 hello.c ，内容分别为 ::&lt;/p&gt;

&lt;p&gt;#ifndef HELLO_H&lt;br /&gt;
#define HELLO_H&lt;/p&gt;

&lt;p&gt;void sayHello();&lt;/p&gt;

&lt;p&gt;#endif&lt;br /&gt;
和 ::&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;quot;hello.h&amp;quot;

void sayHello()
{
    printf(&amp;quot;Hello, world!\n&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 lib 中增加一个 CMakeLists.txt ::&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Cpp&#34;&gt;SET(SRC_LIST hello.c)

ADD_LIBRARY(hello_shared SHARED ${SRC_LIST})
SET_TARGET_PROPERTIES(hello_shared PROPERTIES OUTPUT_NAME &amp;quot;hello&amp;quot;)
SET_TARGET_PROPERTIES(hello_shared PROPERTIES CLEAN_DIRECT_OUTPUT 1)
SET_TARGET_PROPERTIES(hello_shared PROPERTIES VERSION 1.2 SOVERSION 1)

ADD_LIBRARY(hello_static STATIC ${SRC_LIST})
SET_TARGET_PROPERTIES(hello_static PROPERTIES OUTPUT_NAME &amp;quot;hello&amp;quot;)
SET_TARGET_PROPERTIES(hello_static PROPERTIES CLEAN_DIRECT_OUTPUT 1)
SET_TARGET_PROPERTIES(hello_static PROPERTIES VERSION 1.2 SOVERSION 1)

INSTALL(TARGETS hello_shared;hello_static
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib)

INSTALL(FILES hello.h DESTINATION include)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ADD_LIBRARY 指令指示生成一个库目标文件，可指定库的类型为 SHARED 或 STATIC 。&lt;/p&gt;

&lt;p&gt;SET_TARGET_PROPERTIES 指令设置目标的属性，其中 CLEAN_DIRECT_OUTPUT 部分用于指示在生成具有相同名字的（OUTPUT_NAME）的目标时，是否清理上次生成的内容。由于这罗的动态和静态库都使用 hello 这个名字，因此需要设置此不见标志。&lt;/p&gt;

&lt;p&gt;这个配置文件同时生成了动态连接库和静态连接库，并把头文件安装到 include 目录。&lt;/p&gt;

&lt;p&gt;引用动态库&lt;br /&gt;
修改 src 中的 main.c ::&lt;/p&gt;

&lt;p&gt;#include &lt;stdio.h&gt;&lt;br /&gt;
#include &amp;quot;hello.h&amp;quot;&lt;/p&gt;

&lt;p&gt;int main(int argc, char* argv[]){&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sayHello();
return 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;br /&gt;
并在 src 中的 CMakeLists.txt 中，包含 lib 目录，以及让 hello 可执行文件链接到生成的库 ::&lt;/p&gt;

&lt;p&gt;ADD_SUBDIRECTORY(lib)&lt;br /&gt;
INCLUDE_DIRECTORIES(lib)&lt;/p&gt;

&lt;p&gt;ADD_EXECUTABLE(hello main.c)&lt;br /&gt;
TARGET_LINK_LIBRARIES(hello hello_shared)&lt;/p&gt;

&lt;p&gt;INSTALL(TARGETS hello DESTINATION bin)&lt;br /&gt;
INCLUDE_DIRECTORIES 指定 include 时要包含的头文件搜索路径。&lt;/p&gt;

&lt;p&gt;TARGET_LINK_LIBRARIES 指示链接到目标库。由于我们的库与源代码在同一个 cmake 构建系统中，可直接用目标名 hello_shared 或 hello_static，否则应该用库文件名。链接时，如果链接库放在非系统特定的库目录下，那么需要通过 LINK_DIRECTORIES(路径) 指定库的搜索路径，或者直接用绝对路径。&lt;/p&gt;

&lt;p&gt;如果无法在 CMakeLists.txt 中指定 INCLUDE_DIRECTORIES 和 LINK_DIRECTORIES ，还可以通过 shell 变量 CMAKE_INCLUDE_PATH 和 CMAKE_LIBRARY_PATH，在 cmake 构建时传递给 cmake 。&lt;/p&gt;

&lt;p&gt;然后，在 CMakeLists.txt 中通过 FIND_PATH 指令来判断是否找到相应的头文件路径，并包含进来 ::&lt;/p&gt;

&lt;p&gt;FIND_PATH(myHeader hello.h)&lt;br /&gt;
IF(myHeader)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INCLUDE_DIRECTORIES(${myHeader})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ENDIF(myHeader)&lt;br /&gt;
FIND_PATH 用法为 ::&lt;/p&gt;

&lt;p&gt;FIND_PATH(变量名 NAMES 需要查找的文件名列表 PATHS 待查找的路径列表)&lt;br /&gt;
类似地，可用 CMAKE_LIBRARY_PATH 和 FIND_LIBRARY 判断库是否存在。&lt;/p&gt;

&lt;p&gt;顶层目录中的 CMakeLists.txt 保持不变，用来构建其它文件。&lt;/p&gt;

&lt;p&gt;同样，在 build 目录中，进行构建 ::&lt;/p&gt;

&lt;p&gt;(mkdir -p build; cd build; cmake -DCMAKE_INSTALL_PREFIX=$PWD/usr; make install)&lt;br /&gt;
生成后，看 build 中的 usr ，有以下的目录树 ::&lt;/p&gt;

&lt;p&gt;usr/&lt;br /&gt;
├── bin&lt;br /&gt;
│   ├── hello&lt;br /&gt;
│   └── runhello.sh&lt;br /&gt;
├── include&lt;br /&gt;
│   └── hello.h&lt;br /&gt;
├── lib&lt;br /&gt;
│   ├── libhello.a&lt;br /&gt;
│   ├── libhello.so -&amp;gt; libhello.so.1&lt;br /&gt;
│   ├── libhello.so.1 -&amp;gt; libhello.so.1.2&lt;br /&gt;
│   └── libhello.so.1.2&lt;br /&gt;
└── share&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;└── doc
    └── HELLO
        ├── hello.txt
        └── README
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;要注意，直接运行 ./usr/bin/hello 时，会报告无法找到 libhello.so.1 的错误（如果是链接到静态库 hello_static 则不会出现此错误） ::&lt;/p&gt;

&lt;p&gt;/usr/bin/hello: error while loading shared libraries: libhello.so.1: cannot open shared object file: No such file or directory&lt;br /&gt;
这是由于系统默认的库搜索路径在 /etc/ld.so.config 中指定，可通过 LD_LIBRARY_PATH 变量暂时指定一个路径，即在 build 目录下 ::&lt;/p&gt;

&lt;p&gt;LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PWD/usr/lib ./usr/bin/hello&lt;br /&gt;
就会正确地运行和输出。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>cmake himix200 toolchain</title>
            <link>/language/cpp/cmake-himix200-toolchain/</link>
            <pubDate>Sun, 23 Feb 2020 08:36:05 CST</pubDate>
            <author>rinetd</author>
            <guid>/language/cpp/cmake-himix200-toolchain/</guid>
            <description>

&lt;p&gt;toolchains/himix200.toolchain.cmake&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# set cross-compiled system type, it&#39;s better not use the type which cmake cannot recognized.
SET ( CMAKE_SYSTEM_NAME Linux )
SET ( CMAKE_SYSTEM_PROCESSOR arm )
# when hislicon SDK was installed, toolchain was installed in the path as below: 
SET ( CMAKE_C_COMPILER /opt/hisi-linux/x86-arm/arm-himix200-linux/bin/arm-himix200-linux-gcc )
SET ( CMAKE_CXX_COMPILER /opt/hisi-linux/x86-arm/arm-himix200-linux/bin/arm-himix200-linux-g++ )

# set searching rules for cross-compiler
SET ( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER )
SET ( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY )
SET ( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY )

# set ${CMAKE_C_FLAGS} and ${CMAKE_CXX_FLAGS}flag for cross-compiled process
SET ( CROSS_COMPILATION_ARM himix200 )
SET ( CROSS_COMPILATION_ARCHITECTURE armv7-a )

# set g++ param
SET ( CMAKE_CXX_FLAGS &amp;quot;-std=c++11 -march=armv7-a -mfloat-abi=softfp -mfpu=neon-vfpv4 -fopenmp ${CMAKE_CXX_FLAGS}&amp;quot; )

add_definitions(-D__ARM_NEON)
add_definitions(-D__ANDROID__)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;build-for-hisilicon-platform-with-cross-compiling&#34;&gt;Build for Hisilicon platform with cross-compiling&lt;/h2&gt;

&lt;p&gt;$ mkdir -p build &amp;amp;&amp;amp; cd build&lt;br /&gt;
$ cmake -DCMAKE_TOOLCHAIN_FILE=../toolchains/himix200.toolchain.cmake ..&lt;/p&gt;

&lt;p&gt;$ make -j4&lt;br /&gt;
$ make install&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;# minimum cmake version
cmake_minimum_required(VERSION 3.5.1)

# set top directory path
#exec_program(&amp;quot;dirname `pwd`&amp;quot; OUTPUT_VARIABLE TOP)
set(TOP &amp;quot;/opt/source/work/hi3516d_osd/src_ipc_hi3516d_070_16M_osd&amp;quot;)

set(CMAKE_SYSTEM_NAME Linux)
# specify the cross compiler
set(CMAKE_C_COMPILER &amp;quot;/opt/hisi-linux/x86-arm/arm-hisiv300-linux/target/bin/arm-hisiv300-linux-gcc&amp;quot;)
set(CMAKE_CXX_COMPILER &amp;quot;/opt/hisi-linux/x86-arm/arm-hisiv300-linux/target/bin/arm-hisiv300-linux-g++&amp;quot;)
#set(CMAKE_C_COMPILER &amp;quot;gcc&amp;quot;)
#set(CMAKE_CXX_COMPILER &amp;quot;g++&amp;quot;)
# where is the target environment 
seT(CMAKE_FIND_ROOT_PATH ${TOP} /opt/hisi-linux/x86-arm/arm-hisiv300-linux)

# search for programs in the build host directories (not necessary NEVER ONLY BOTH)
#sET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
# for libraries and headers in the target directories
seT(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
seT(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

#set head file path
include_directories(${TOP}/hisi_070/include)
include_directories(${TOP}/osd)

#set library path
link_directories(${TOP}/hisi_070/lib)
link_directories(${TOP}/lib)

# set compile flags
set(CMAKE_C_FLAGS &amp;quot;${CMAKE_C_FLAGS} -Wall -mcpu=cortex-a7 -mfloat-abi=softfp -mfpu=neon-vfpv4 -ffunction-sections&amp;quot;)
set(CMAKE_C_FLAGS &amp;quot;${CMAKE_C_FLAGS} -mno-unaligned-access -fno-aggressive-loop-optimizations&amp;quot;) 
set(CMAKE_C_FLAGS &amp;quot;${CMAKE_C_FLAGS} -DARCH=arm -DHIARCH=hi3516a -DHICHIP=0x3516A100 &amp;quot;) 

link_libraries(&amp;quot;-Wl,-Bdynamic&amp;quot;)
link_libraries(&amp;quot;-lpthread -lrt -ldl -lm -lc -lstdc++&amp;quot;)

set(LIBRARY_OUTPUT_PATH ${TOP}/lib)
set(EXECUTABLE_OUTPUT_PATH ${TOP}/bin)

#option(USE_SHARED &amp;quot;SHARED&amp;quot; ON)

message(&amp;quot;========================================&amp;quot;)
if(USE_SHARED)
    message(&amp;quot;output shared library&amp;quot;)
else()
    message(&amp;quot;output static library&amp;quot;)
endif()
message(&amp;quot;========================================&amp;quot;)


########################libosd.so/libosd.a#######################################
# add src from path &amp;quot;osd/**.c&amp;quot;
aux_source_directory(${TOP}/osd OSD_SRC)

if(USE_SHARED)
    add_library(osd_share SHARED ${OSD_SRC})
    set_target_properties(osd_share PROPERTIES OUTPUT_NAME &amp;quot;osd&amp;quot;)
    set_target_properties(osd_share PROPERTIES CLEAN_DIRECT_OUTPUT 1)
    target_link_libraries(osd_share mpi VoiceEngine upvqe dnvqe)
else()
    add_library(osd_static STATIC ${OSD_SRC})
    set_target_properties(osd_static PROPERTIES OUTPUT_NAME &amp;quot;osd&amp;quot;)
    set_target_properties(osd_static PROPERTIES CLEAN_DIRECT_OUTPUT 1)
    target_link_libraries(osd_static mpi VoiceEngine upvqe dnvqe)
endif()


######################### demo ######################################
# add src from path &amp;quot;demo/**.c&amp;quot;
aux_source_directory(${TOP}/demo DEMO_SRC)
# target execute 
add_executable(demo_exe ${DEMO_SRC})

if(USE_SHARED)
    add_dependencies(demo_exe osd_share)
else()
    add_dependencies(demo_exe osd_static)
endif()

set_target_properties(demo_exe PROPERTIES OUTPUT_NAME &amp;quot;demo&amp;quot;)
set_target_properties(demo_exe PROPERTIES CLEAN_DIRECT_OUTPUT 1)
target_link_libraries(demo_exe osd mpi VoiceEngine upvqe dnvqe)
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
        <item>
            <title>yolov3</title>
            <link>/ai/yolo/yolov3/</link>
            <pubDate>Sat, 22 Feb 2020 17:44:54 CST</pubDate>
            <author>rinetd</author>
            <guid>/ai/yolo/yolov3/</guid>
            <description>

&lt;h2 id=&#34;代码-tensorflow2-0-examples-4-object-detection-yolov3-https-github-com-yunyang1994-tensorflow2-0-examples-tree-master-4-object-detection-yolov3&#34;&gt;代码：&lt;a href=&#34;https://github.com/YunYang1994/TensorFlow2.0-Examples/tree/master/4-Object_Detection/YOLOV3&#34; target=&#34;_blank&#34;&gt;TensorFlow2.0-Examples/4-Object_Detection/YOLOV3&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;既然代码贴出来了，大家又这么喜欢问，那么我就应该写点什么。几天下来，洋洋洒洒竟有几千余字。遂理之，而又恐小子之言徒惹发笑，思忖再三，终究还是落了笔。翻了下大家开的几百条&lt;a href=&#34;https://github.com/YunYang1994/tensorflow-yolov3/issues&#34; target=&#34;_blank&#34;&gt;issues&lt;/a&gt;，其中的吐槽大致可以总结成以下三点:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;YOLOv3 算法的前向传播过程怎么进行的，如何理解画网格？&lt;/strong&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;YOLOv3 到底是怎么训练的，损失函数理解太难了，&lt;a href=&#34;https://github.com/YunYang1994/TensorFlow2.0-Examples/tree/master/4-Object_Detection/YOLOV3&#34; target=&#34;_blank&#34;&gt;代码&lt;/a&gt;写得跟一坨屎一样!&lt;/strong&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;为什么我在训练的时候loss出现了Nan，有什么办法解决它吗？&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;哈哈，本文的目的，就在于此。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;1-yolov3算法的前向传播过程&#34;&gt;1. YOLOv3算法的前向传播过程&lt;/h1&gt;

&lt;p align=&#34;center&#34;&gt;
    &lt;img width=&#34;60%&#34; src=&#34;https://pjreddie.com/media/image/Screen_Shot_2018-03-24_at_10.48.42_PM.png&#34; style=&#34;max-width:80%;&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;假设我们想对上面这张 &lt;code&gt;416 X 416&lt;/code&gt; 大小的图片进行预测，把图中&lt;code&gt;dog&lt;/code&gt;、&lt;code&gt;bicycle&lt;/code&gt;和&lt;code&gt;car&lt;/code&gt;三种物体框出来，其实涉及到以下三个过程：&lt;/p&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 怎么在图片上找出很多有价值的候选框？&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 接着判断候选框里有没有物体？&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 如果有物体的话，那么它属于哪个类别？&lt;br /&gt;
&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;听起来就像把大象装进冰箱，分三步走。事实上，目前的 anchor-based 机制算法例如 RCNN、Faster rcnn 以及 YOLO 算法都是这个思想。最早的时候， &lt;a href=&#34;https://arxiv.org/abs/1311.2524&#34; target=&#34;_blank&#34;&gt;RCNN&lt;/a&gt; 是这么干的，首先利用 Selective Search 的方法通过图片上像素之间的相似度和纹理特征进行区域合并，然后提出很多候选框并喂给 CNN 网络提取特征映射(feature map)，最后利用 feature map 训练SVM来对目标和背景进行分类.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/30433053/62198083-944b6e00-b3b3-11e9-9cd5-a7230ced3762.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这是最早利用神经网络进行目标检测的开山之作，虽然现在看来有不少瑕疵，例如：&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Selective Search 会在图片上提取2000个候选区域，每个候选区域都会喂给 CNN 进行特征提取，这个过程太冗余啦，其实这些候选区域之间很多特征其实是可以共享的；&lt;br&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;由于 CNN 最后一层是全连接层，因此输入图片的尺寸大小也有限制，只能进行 Crop 或者 Warp，这样一来图片就会扭曲、变形和失真；&lt;br&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;在利用 SVM 分类器对候选框进行分类的时候，每个候选框的特征向量都要保留在磁盘上，很浪费空间！&lt;br&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;尽管如此，但仍不可否认它具有划时代的意义，至少告诉后人我们是可以利用神经网络进行目标检测的。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;后面，一些大神们在此基础上提出了很多改进，从 Fast RCNN 到 Faster RCNN 再到 Mask RCNN, 目标检测的 region proposal 过程变得越来越有针对性，并提出了著名的 RPN 网络去学习如何给出高质量的候选框，然后再去判断所属物体的类别。简单说来就是: 提出候选框 ---&amp;gt; 然后分类，这就是我们常说的 two-stage 算法。two-stage 算法的好处就是精度较高，但是检测速度满足不了实时性(real time)的要求。在这样的背景下，YOLO 算法应运而生。&lt;/p&gt;

&lt;p&gt;2016 年 Redmon J 等提出 YOLO 网络, 其特点是将生成候选框与分类回归合并成一个步骤, 预测时特征图被分成 S×S (S 为常数, 在 YOLOv1 中取 7) 个 cell, 对每个 cell 进行预测, 这就大大降低了计算复杂度, 加快了目标检测的速度, 帧率最高可达 45 fps, 之后, Redmon J 再次提出了YOLOv2, 与前代相比, 在VOC2007 测试集上的 mAP 由 67.4% 提高到 76.8%, 然而由于一个 cell 只负责预测一个物体, 面对被遮挡目标的识别表现不够好。 2018 年 4 月, 发布了第三个版本 YOLOv3, 在 COCO 数据集上的 mAP-50 由 YOLOv2 的 44.0% 提高到 57.9%, 与 mAP 61.1% 的 RetinaNet 相比, RetinaNet 在输入尺寸 500×500 的情况下检测速度约 98 ms/帧, 而 YOLOv3 在输入尺寸 416×416 时检测速 度可达 29 ms/帧, 在保证速度的前提下, 达到了很高的准确率.&lt;/p&gt;

&lt;h2 id=&#34;1-1-不妨先给图片画网格&#34;&gt;1.1 不妨先给图片画网格&lt;/h2&gt;

&lt;p&gt;YOLO算法最重要的思想就是&lt;strong&gt;画网格&lt;/strong&gt;，由于本人做过一点点关于计算流体力学(Computational Fluid Dynamics, 简称CFD)的研究，所以听到网格(grid cells)这个单词感觉特别亲切。emm，先来看看&lt;a href=&#34;https://arxiv.org/abs/1506.02640&#34; target=&#34;_blank&#34;&gt;YOLOv1论文&lt;/a&gt;里的这张图:&lt;br /&gt;
&lt;p align=&#34;center&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;img width=&amp;quot;70%&amp;quot; src=&amp;quot;https://user-images.githubusercontent.com/30433053/62187018-97863000-b39a-11e9-84ff-d7d3166f0407.png&amp;quot; style=&amp;quot;max-width:90%;&amp;quot;&amp;gt;
&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;初学者咋一看，这特么什么东西？只想说，看不懂！事实上，网上很多关于YOLO系列算法的教程也喜欢拿这张图去忽悠。好了，我想从这张图片出发，讲一讲 YOLO 算法的&lt;strong&gt;画网格&lt;/strong&gt;思想。在讲这个之前，我们先来了解一下什么是 feature map 和 ROI， 以及它们之间的关系。&lt;/p&gt;

&lt;h3 id=&#34;1-1-1-什么是-feature-map&#34;&gt;1.1.1 什么是 feature map&lt;/h3&gt;

&lt;p&gt;当我们谈及 CNN 网络，总能听到 feature map 这个词。它也叫特征映射，简单说来就是输入图像在与卷积核进行卷积操作后得到图像特征。在输入层: 如果是灰度图片，那就只有一个feature map；如果是彩色图片（RGB），一般就是3个 feature map（红绿蓝）。一般而言，CNN 网络在对图像自底向上提取特征时，feature map 的数量(其实也对应的就是卷积核的数目) 会越来越多，而空间信息会越来越少，其特征也会变得越来越抽象。比如著名的 &lt;a href=&#34;https://github.com/YunYang1994/TensorFlow2.0-Examples/tree/master/3-Neural_Network_Architecture/vgg16&#34; target=&#34;_blank&#34;&gt;VGG16&lt;/a&gt; 网络，它的 feature map 变化就是这个样子。&lt;/p&gt;

&lt;p align=&#34;center&#34;&gt;
    &lt;img width=&#34;70%&#34; src=&#34;https://user-images.githubusercontent.com/30433053/66764054-a4b3b500-eedb-11e9-9329-eb9eff9950f7.png&#34; style=&#34;max-width:70%;&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;feature map 在空间尺寸上越来越小，但在通道尺寸上变得越来越深，这就是 VGG16 的特点。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;讲到 feature map 哦，就不得不提一下人脸识别领域里经常提到的 embedding. 它其实就是 feature map 被最后一层全连接层所提取到特征向量。深度学习鼻祖 hinton 于2006年发表于《SCIENCE 》上的一篇&lt;a href=&#34;http://www.cs.toronto.edu/~hinton/science.pdf&#34; target=&#34;_blank&#34;&gt;论文&lt;/a&gt; 首次利用自编码网络实现了对 mnist 数据集特征的提取，得到的特征是一个2维或3维的向量。值得一提的是，也是这篇论文揭开了深度学习兴起的序幕。&lt;/p&gt;

&lt;p align=&#34;center&#34;&gt;
    &lt;img width=&#34;50%&#34; src=&#34;https://user-images.githubusercontent.com/30433053/62225873-d395b100-b3eb-11e9-8a3b-ac3fe9d75518.png&#34; style=&#34;max-width:50%;&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;下面就是上面这张图片里的数字在 CNN 空间里映射后得到的特征向量在2维和3维空间里的样子。如果你对这个过程感兴趣，可以参考这份&lt;a href=&#34;https://github.com/YunYang1994/SphereFace&#34; target=&#34;_blank&#34;&gt;代码&lt;/a&gt;。&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;2维空间&lt;/th&gt;
&lt;th&gt;3维空间&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;https://github.com/YunYang1994/SphereFace/blob/master/image/2D_Original_Softmax_Loss_embeddings.gif&#34; alt=&#34;image&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;https://github.com/YunYang1994/SphereFace/blob/master/image/3D_Original_Softmax_Loss_embeddings.gif&#34; alt=&#34;weibo-logo&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;每一种颜色代表一种数字，原来这些数字的图片信息是[28, 28, 1]维度的，现在经 CNN 网络特征映射后，居然得到的是一个2维或3维的特征向量，真是降维打击👊！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;1-1-2-roi-映射到-feature-map&#34;&gt;1.1.2 ROI 映射到 feature map&lt;/h3&gt;

&lt;p&gt;好了，我们现在大概知道特征映射是怎么回事了。现在需要讲讲 ROI 的概念，ROI 的全称是 Region Of Interest, 中文翻译过来叫感兴趣区域。说白了就是从图像中选择一块区域，这块区域是我们对图像分析所关注的重点， 比如我们前面提到的候选框区域，也可以认为是 ROI。&lt;strong&gt;前面我们提到：CNN 网络在对图像自底向上提取特征时，得到的 feature map 一般都是在空间尺寸上越来越小，而在通道尺寸上变得越来越深。&lt;/strong&gt; 那么，为什么要这么做？&lt;/p&gt;

&lt;p align=&#34;center&#34;&gt;
    &lt;img width=&#34;60%&#34; src=&#34;https://user-images.githubusercontent.com/30433053/62198793-e4770000-b3b4-11e9-808f-d53703455def.png&#34; style=&#34;max-width:60%;&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;其实，这就与 ROI 映射到 Feature map 有关。 在上面这幅图里：原图里的一块 ROI 在 CNN 网络空间里映射后，在 feature map 上空间尺寸会变得更小，甚至是一个点, 但是这个点的通道信息会很丰富，这些通道信息是 ROI 区域里的图片信息在 CNN 网络里映射得到的特征表示。由于图像中各个相邻像素在空间上的联系很紧密，从而在空间上造成具有很大的冗余性。&lt;strong&gt;因此，我们往往会通过在空间上降维，而在通道上升维的方式来消除这种冗余性，尽量以最小的维度来获得它最本质的特征。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/30433053/62262236-84329d80-b44a-11e9-9c7f-cf225bed4754.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;原图左上角红色 ROI 经 CNN 映射后在 feature map 空间上只得到了一个点，但是这个点有85个通道。那么，ROI的维度由原来的 [32, 32, 3] 变成了现在的 85 维，这难道又不是降维打击么？👊&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;按照我的理解，这其实就是 CNN 网络对 ROI 进行特征提取后得到的一个85维的特征向量。这个特征向量前4个维度代表的是候选框信息，中间这个维度代表是判断有无物体的概率，后面80个维度代表的是对 80 个类别的分类概率信息。&lt;/p&gt;

&lt;h3 id=&#34;1-1-3-yolov3-的网格思想&#34;&gt;1.1.3 YOLOv3 的网格思想&lt;/h3&gt;

&lt;p&gt;YOLOv3 对输入图片进行了粗、中和细网格划分，以便分别实现对大、中和小物体的预测。其实在下面这幅图里面，每一个网格对应的就是一块 ROI 区域。如果某个物体的中心刚好落在这个网格中，那么这个网格就负责预测这个物体.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If the center of an object falls into a grid cell, that grid cell is responsible for detecting that object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;假如输入图片的尺寸为 &lt;code&gt;416X416&lt;/code&gt;, 那么得到粗、中和细网格尺寸分别为 &lt;code&gt;13X13&lt;/code&gt;、&lt;code&gt;26X26&lt;/code&gt;和&lt;code&gt;52X52&lt;/code&gt;。这样一算，那就是在长宽尺寸上分别缩放了&lt;code&gt;32&lt;/code&gt;、&lt;code&gt;16&lt;/code&gt;和&lt;code&gt;8&lt;/code&gt;倍，其实这些倍数正好也是这些 ROI 的尺寸大小。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;粗网格&lt;/th&gt;
&lt;th&gt;中网格&lt;/th&gt;
&lt;th&gt;细网格&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/30433053/62338487-52cdd680-b50b-11e9-9ffe-86a42cfa9acb.png&#34; alt=&#34;image&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/30433053/62338514-6bd68780-b50b-11e9-8085-be9fe9d84d77.png&#34; alt=&#34;image&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/30433053/62338538-8446a200-b50b-11e9-8a73-0334271d73b7.png&#34; alt=&#34;image&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;1-2-darknet-53-的网络结构&#34;&gt;1.2 Darknet-53 的网络结构&lt;/h2&gt;

&lt;p&gt;Darknet-53 有多牛逼？看看下面这张图，作者进行了比较，得出的结论是 Darknet-53 在精度上可以与最先进的分类器进行媲美，同时它的浮点运算更少，计算速度也最快。和 ReseNet-101 相比，Darknet-53 网络的速度是前者的1.5倍；虽然 ReseNet-152 和它性能相似，但是用时却是它的2倍以上。&lt;/p&gt;

&lt;p align=&#34;center&#34;&gt;
    &lt;img width=&#34;60%&#34; src=&#34;https://user-images.githubusercontent.com/30433053/62341417-d7bded80-b515-11e9-8f98-cd3a75e5be63.png&#34; style=&#34;max-width:60%;&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;此外，Darknet-53 也可以实现每秒最高的测量浮点运算，这就意味着网络结构可以更好地利用 GPU，使其测量效率更高，速度也更快。&lt;/p&gt;

&lt;h3 id=&#34;1-2-1-backbone-结构&#34;&gt;1.2.1 backbone 结构&lt;/h3&gt;

&lt;p&gt;Darknet-53 的主体框架如下图所示，它主要由 &lt;code&gt;Convolutional&lt;/code&gt; 和 &lt;code&gt;Residual&lt;/code&gt; 结构所组成。需要特别注意的是，最后三层 &lt;code&gt;Avgpool&lt;/code&gt;、&lt;code&gt;Connected&lt;/code&gt; 和 &lt;code&gt;softmax&lt;/code&gt; layer 是用于在 &lt;code&gt;Imagenet&lt;/code&gt; 数据集上作分类训练用的。当我们用 Darknet-53 层对图片提取特征时，是不会用到这三层的。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;网络结构&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://github.com/YunYang1994/TensorFlow2.0-Examples/blob/master/4-Object_Detection/YOLOV3/core/backbone.py&#34; target=&#34;_blank&#34;&gt;代码结构&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img width=&#34;150%&#34; src=&#34;https://raw.githubusercontent.com/YunYang1994/tensorflow-yolov3/1551aa4734added3ad0c6979ed2ed74894cdd504/docs/images/darknet53.png&#34; style=&#34;max-width:150%;&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;img width=&#34;80%&#34; src=&#34;https://user-images.githubusercontent.com/30433053/62342173-7ba89880-b518-11e9-8878-f1c38466eb39.png&#34; style=&#34;max-width:70%;&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;代码结构里的&lt;code&gt;downsample&lt;/code&gt;参数的意思是下采样，表示 feature map 输入该层 layer 后尺寸会变小。例如在第二层 layer 的输入尺寸是 &lt;code&gt;256X256&lt;/code&gt;，输出尺寸则变成了 &lt;code&gt;128X128&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;1-2-2-convolutional-结构&#34;&gt;1.2.2 Convolutional 结构&lt;/h3&gt;

&lt;p&gt;Convolutional 结构其实很简单，就是普通的卷积层，其实没啥讲的。但是对于 &lt;code&gt;if downsample&lt;/code&gt; 的情况，初学者可能觉得有点陌生， &lt;code&gt;ZeroPadding2D&lt;/code&gt; 是什么层？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def convolutional(input_layer, filters_shape, downsample=False, activate=True, bn=True):
    if downsample:
        input_layer = tf.keras.layers.ZeroPadding2D(((1, 0), (1, 0)))(input_layer)
        padding = &#39;valid&#39;
        strides = 2
    else:
        strides = 1
        padding = &#39;same&#39;

    conv = tf.keras.layers.Conv2D(filters=filters_shape[-1], kernel_size = filters_shape[0], strides=strides, padding=padding,
                                  use_bias=not bn, kernel_regularizer=tf.keras.regularizers.l2(0.0005),
                                  kernel_initializer=tf.random_normal_initializer(stddev=0.01),
                                  bias_initializer=tf.constant_initializer(0.))(input_layer)

    if bn: conv = BatchNormalization()(conv)
    if activate == True: conv = tf.nn.leaky_relu(conv, alpha=0.1)

    return conv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;讲到 &lt;code&gt;ZeroPadding2D&lt;/code&gt;层，我们得先了解它是什么，为什么有这个层。对于它的定义，&lt;a href=&#34;https://keras-cn.readthedocs.io/en/latest/layers/convolutional_layer/&#34; target=&#34;_blank&#34;&gt;Keras&lt;/a&gt; 官方给了很好的解释:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;keras.layers.convolutional.ZeroPadding2D(padding=(1, 1), data_format=None)&lt;/code&gt;&lt;br&gt;&lt;br /&gt;
说明: 对2D输入（如图片）的边界填充0，以控制卷积以后特征图的大小&lt;br /&gt;
&lt;p align=&#34;center&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;img width=&amp;quot;20%&amp;quot; src=&amp;quot;https://camo.githubusercontent.com/d8c0543ca968db698c9451b7c3cba9b7836e400e/68747470733a2f2f61736b2e71636c6f7564696d672e636f6d2f64726166742f313038323535352f3068753464326e6333352e676966&amp;quot; style=&amp;quot;max-width:20%;&amp;quot;&amp;gt;
&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其实就是对图片的上下左右四个边界填充0而已，&lt;code&gt;padding=((top_pad, bottom_pad), (left_pad, right_pad))&lt;/code&gt;。 很简单吧，快打开你的&lt;code&gt;ipython&lt;/code&gt;试试吧！&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ipython&#34;&gt;In [2]: x=tf.keras.layers.Input([416,416,3])                                                                                                                                                                

In [3]: tf.keras.layers.ZeroPadding2D(padding=((1,0),(1,0)))(x)                                                                                                                                             
Out[3]: &amp;lt;tf.Tensor &#39;zero_padding2d/Identity:0&#39; shape=(None, 417, 417, 3) dtype=float32&amp;gt;

In [4]: tf.keras.layers.ZeroPadding2D(padding=((1,1),(1,1)))(x)                                                                                                                                             
Out[4]: &amp;lt;tf.Tensor &#39;zero_padding2d_1/Identity:0&#39; shape=(None, 418, 418, 3) dtype=float32&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-2-3-residual-残差模块&#34;&gt;1.2.3 Residual 残差模块&lt;/h3&gt;

&lt;p&gt;残差模块最显著的特点是使用了 &lt;code&gt;short cut&lt;/code&gt; 机制（&lt;strong&gt;有点类似于电路中的短路机制&lt;/strong&gt;）来缓解在神经网络中增加深度带来的梯度消失问题，从而使得神经网络变得更容易优化。它通过恒等映射(identity mapping)的方法使得输入和输出之间建立了一条直接的关联通道，从而使得网络集中学习输入和输出之间的残差。&lt;/p&gt;

&lt;p align=&#34;center&#34;&gt;
    &lt;img width=&#34;50%&#34; src=&#34;https://user-images.githubusercontent.com/30433053/62363930-de1e8a80-b552-11e9-98e9-914da36e5922.png&#34; style=&#34;max-width:50%;&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def residual_block(input_layer, input_channel, filter_num1, filter_num2):
    short_cut = input_layer
    conv = convolutional(input_layer, filters_shape=(1, 1, input_channel, filter_num1))
    conv = convolutional(conv       , filters_shape=(3, 3, filter_num1,   filter_num2))

    residual_output = short_cut + conv
    return residual_output
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;不知道大家有没有注意，整个 &lt;code&gt;Darknet-53&lt;/code&gt;  网络压根就没有使用 &lt;code&gt;Pooling&lt;/code&gt; 层。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;1-3-anchor-机制&#34;&gt;1.3 anchor 机制&lt;/h2&gt;

&lt;h3 id=&#34;1-3-1-边界框的预测&#34;&gt;1.3.1 边界框的预测&lt;/h3&gt;

&lt;p&gt;前面讲到，如果物体的中心落在了这个网格里，那么这个网格就要负责去预测它。在下面这幅图里：黑色虚线框代表先验框(anchor)，蓝色框表示的是预测框.&lt;br /&gt;
&lt;p align=&#34;center&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;img width=&amp;quot;40%&amp;quot; src=&amp;quot;https://user-images.githubusercontent.com/30433053/62366897-b8957f00-b55a-11e9-93e0-89e796c36200.png&amp;quot; style=&amp;quot;max-width:40%;&amp;quot;&amp;gt;
&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;b_h 和 b_w 分别表示预测框的长宽，P_h 和 P_w 分别表示先验框的长和宽。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;t_x 和 t_y 表示的是物体中心距离网格左上角位置的偏移量，C_x 和 C_y 则代表网格左上角的坐标。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def decode(conv_output, i=0):
    # 这里的 i=0、1 或者 2， 以分别对应三种网格尺度
    conv_shape       = tf.shape(conv_output)
    batch_size       = conv_shape[0]
    output_size      = conv_shape[1]

    conv_output = tf.reshape(conv_output, (batch_size, output_size, output_size, 3, 5 + NUM_CLASS))

    conv_raw_dxdy = conv_output[:, :, :, :, 0:2] # 中心位置的偏移量
    conv_raw_dwdh = conv_output[:, :, :, :, 2:4] # 预测框长宽的偏移量
    conv_raw_conf = conv_output[:, :, :, :, 4:5]
    conv_raw_prob = conv_output[:, :, :, :, 5: ]

    # 好了，接下来需要画网格了。其中，output_size 等于 13、26 或者 32
    y = tf.tile(tf.range(output_size, dtype=tf.int32)[:, tf.newaxis], [1, output_size])
    x = tf.tile(tf.range(output_size, dtype=tf.int32)[tf.newaxis, :], [output_size, 1])

    xy_grid = tf.concat([x[:, :, tf.newaxis], y[:, :, tf.newaxis]], axis=-1)
    xy_grid = tf.tile(xy_grid[tf.newaxis, :, :, tf.newaxis, :], [batch_size, 1, 1, 3, 1])
    xy_grid = tf.cast(xy_grid, tf.float32) # 计算网格左上角的位置
    # 根据上图公式计算预测框的中心位置
    pred_xy = (tf.sigmoid(conv_raw_dxdy) + xy_grid) * STRIDES[i] # 乘上缩放的倍数，如 8、16 和 32 倍。
    # 根据上图公式计算预测框的长和宽大小
    pred_wh = (tf.exp(conv_raw_dwdh) * ANCHORS[i]) * STRIDES[i]
    # 合并边界框的位置和长宽信息
    pred_xywh = tf.concat([pred_xy, pred_wh], axis=-1) 

    pred_conf = tf.sigmoid(conv_raw_conf) # 计算预测框里object的置信度
    pred_prob = tf.sigmoid(conv_raw_prob) # 计算预测框里object的类别概率

    return tf.concat([pred_xywh, pred_conf, pred_prob], axis=-1)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-3-2-k-means-的作用&#34;&gt;1.3.2 K-means 的作用&lt;/h3&gt;

&lt;p&gt;按照前文的思路，那么问题来了：先验框是怎么来的？对于这点，作者在 YOLOv2 论文里给出了很好的解释：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;we run k-means clustering on the training set bounding boxes to automatically find good priors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其实就是使用 &lt;code&gt;k-means&lt;/code&gt; 算法对训练集上的 boudnding box 尺度做聚类。此外，考虑到训练集上的图片尺寸不一，因此对此过程进行归一化处理。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;k-means&lt;/code&gt; 聚类算法有个坑爹的地方在于，类别的个数需要人为事先指定。这就带来一个问题，先验框 &lt;code&gt;anchor&lt;/code&gt; 的数目等于多少最合适？一般来说，&lt;code&gt;anchor&lt;/code&gt; 的类别越多，那么 &lt;code&gt;YOLO&lt;/code&gt; 算法就越能在不同尺度下与真实框进行回归，但是这样就会导致模型的复杂度更高，网络的参数量更庞大。&lt;/p&gt;

&lt;p align=&#34;center&#34;&gt;
    &lt;img width=&#34;60%&#34; src=&#34;https://user-images.githubusercontent.com/30433053/62404991-d222df00-b5cb-11e9-8347-f3808eb8f893.png&#34; style=&#34;max-width:60%;&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We choose k = 5 as a good tradeoff between model complexity and high recall.&lt;br /&gt;
If we use 9 centroids we see a much higher average IOU. This indicates that using k-means to generate our bounding box starts the model off with a better representation and makes the task easier to learn.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在上面这幅图里，作者发现 k = 5 时就能较好地实现高召回率与模型复杂度之间的平衡。由于在 YOLOv3 算法里一共有3种尺度预测，因此只能是3的倍数，所以最终选择了 9 个先验框。这里还有个问题需要解决，k-means 度量距离的选取很关键。距离度量如果使用标准的欧氏距离，大框框就会比小框产生更多的错误。在目标检测领域，我们度量两个边界框之间的相似度往往以 IOU 大小作为标准。因此，这里的度量距离也和 IOU 有关。&lt;strong&gt;需要特别注意的是，这里的IOU计算只用到了 boudnding box 的长和宽&lt;/strong&gt;。在&lt;a href=&#34;https://nbviewer.jupyter.org/github/YunYang1994/tensorflow-yolov3/blob/master/docs/Box-Clustering.ipynb&#34; target=&#34;_blank&#34;&gt;我的代码&lt;/a&gt;里，是认为两个先验框的左上角位置是相重合的。(其实在这里偏移至哪都无所谓，因为聚类的时候是不考虑 anchor 框的位置信息的。)&lt;/p&gt;

&lt;p align=&#34;center&#34;&gt;
    &lt;img width=&#34;40%&#34; src=&#34;https://user-images.githubusercontent.com/30433053/62405048-760c8a80-b5cc-11e9-9d2c-1ba88ab4ad65.png&#34; style=&#34;max-width:40%;&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如果两个边界框之间的&lt;code&gt;IOU&lt;/code&gt;值越大，那么它们之间的距离就会越小。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def kmeans(boxes, k, dist=np.median,seed=1):
    &amp;quot;&amp;quot;&amp;quot;
    Calculates k-means clustering with the Intersection over Union (IoU) metric.
    :param boxes: numpy array of shape (r, 2), where r is the number of rows
    :param k: number of clusters
    :param dist: distance function
    :return: numpy array of shape (k, 2)
    &amp;quot;&amp;quot;&amp;quot;
    rows = boxes.shape[0]

    distances     = np.empty((rows, k)) ## N row x N cluster
    last_clusters = np.zeros((rows,))

    np.random.seed(seed)

    # initialize the cluster centers to be k items
    clusters = boxes[np.random.choice(rows, k, replace=False)]

    while True:
        # 为每个点指定聚类的类别（如果这个点距离某类别最近，那么就指定它是这个类别)
        for icluster in range(k): # I made change to lars76&#39;s code here to make the code faster
            distances[:,icluster] = 1 - iou(clusters[icluster], boxes)

        nearest_clusters = np.argmin(distances, axis=1)
	# 如果聚类簇的中心位置基本不变了，那么迭代终止。
        if (last_clusters == nearest_clusters).all():
            break
            
        # 重新计算每个聚类簇的平均中心位置，并它作为聚类中心点
        for cluster in range(k):
            clusters[cluster] = dist(boxes[nearest_clusters == cluster], axis=0)

        last_clusters = nearest_clusters

    return clusters,nearest_clusters,distances
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一般来说，直接默认使用 &lt;a href=&#34;https://github.com/YunYang1994/tensorflow-yolov3/issues/261&#34; target=&#34;_blank&#34;&gt;COCO 数据集&lt;/a&gt;上得到的先验框即可。在大多数情况下，COCO 数据集上的先验框能够 cover 掉我们大多数的数据集场景。&lt;/p&gt;

&lt;h2 id=&#34;1-4-原来是这样预测的&#34;&gt;1.4 原来是这样预测的&lt;/h2&gt;

&lt;h3 id=&#34;1-4-1-准备图片&#34;&gt;1.4.1 准备图片&lt;/h3&gt;

&lt;p&gt;在将图片输入模型之前，需要将图片尺寸 resize 成固定的大小，如 416X416 或 608X608 。如果直接对图片进行 resize 处理，那么会使得图片扭曲变形从而降低模型的预测精度。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def image_preporcess(image, target_size, gt_boxes=None):

    ih, iw    = target_size # resize 尺寸
    h,  w, _  = image.shape # 原始图片尺寸

    scale = min(iw/w, ih/h)
    nw, nh  = int(scale * w), int(scale * h) # 计算缩放后图片尺寸
    image_resized = cv2.resize(image, (nw, nh))
    # 制作一张画布，画布的尺寸就是我们想要的尺寸
    image_paded = np.full(shape=[ih, iw, 3], fill_value=128.0)
    dw, dh = (iw - nw) // 2, (ih-nh) // 2
    # 将缩放后的图片放在画布中央
    image_paded[dh:nh+dh, dw:nw+dw, :] = image_resized
    image_paded = image_paded / 255.

    if gt_boxes is None:
        return image_paded

    else:   # 训练网络时需要对 groudtruth box 进行矫正
        gt_boxes[:, [0, 2]] = gt_boxes[:, [0, 2]] * scale + dw
        gt_boxes[:, [1, 3]] = gt_boxes[:, [1, 3]] * scale + dh
        return image_paded, gt_boxes
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;original_image (768X576)&lt;/th&gt;
&lt;th&gt;letterbox_image (416X416)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YunYang1994/CodeFun/537109c2326c4d9438045779cfe733e4f1336a8b/001-do_something_from_scratch/data/dog.jpg&#34; alt=&#34;image&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/30433053/62408461-16c66e80-b5fc-11e9-8ae5-bb4d9963b43f.jpg&#34; alt=&#34;image&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;1-4-2-网络输出&#34;&gt;1.4.2 网络输出&lt;/h3&gt;

&lt;p&gt;下面这幅图就是 YOLOv3 网络的整体结构，在图中我们可以看到：尺寸为 416X416 的输入图片进入 Darknet-53 网络后得到了 3 个分支，这些分支在经过一系列的卷积、上采样以及合并等操作后最终得到了三个尺寸不一的 feature map，形状分别为 [13, 13, 255]、[26, 26, 255] 和 [52, 52, 255]。&lt;br /&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/YunYang1994/tensorflow-yolov3/1551aa4734added3ad0c6979ed2ed74894cdd504/docs/images/levio.jpeg&#34; alt=&#34;image&#34; /&gt;&lt;br /&gt;
讲了这么多，还是不如看&lt;a href=&#34;https://github.com/YunYang1994/TensorFlow2.0-Examples/blob/master/4-Object_Detection/YOLOV3/core/yolov3.py&#34; target=&#34;_blank&#34;&gt;代码&lt;/a&gt;来得亲切。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def YOLOv3(input_layer):
    # 输入层进入 Darknet-53 网络后，得到了三个分支
    route_1, route_2, conv = backbone.darknet53(input_layer)
    # 见上图中的橘黄色模块(DBL)，一共需要进行5次卷积操作
    conv = common.convolutional(conv, (1, 1, 1024,  512))
    conv = common.convolutional(conv, (3, 3,  512, 1024))
    conv = common.convolutional(conv, (1, 1, 1024,  512))
    conv = common.convolutional(conv, (3, 3,  512, 1024))
    conv = common.convolutional(conv, (1, 1, 1024,  512))

    conv_lobj_branch = common.convolutional(conv, (3, 3, 512, 1024))
    # conv_lbbox 用于预测大尺寸物体，shape = [None, 13, 13, 255]
    conv_lbbox = common.convolutional(conv_lobj_branch, (1, 1, 1024, 3*(NUM_CLASS + 5)), activate=False, bn=False)

    conv = common.convolutional(conv, (1, 1,  512,  256))
    # 这里的 upsample 使用的是最近邻插值方法，这样的好处在于上采样过程不需要学习，从而减少了网络参数
    conv = common.upsample(conv)

    conv = tf.concat([conv, route_2], axis=-1)

    conv = common.convolutional(conv, (1, 1, 768, 256))
    conv = common.convolutional(conv, (3, 3, 256, 512))
    conv = common.convolutional(conv, (1, 1, 512, 256))
    conv = common.convolutional(conv, (3, 3, 256, 512))
    conv = common.convolutional(conv, (1, 1, 512, 256))

    conv_mobj_branch = common.convolutional(conv, (3, 3, 256, 512))
    # conv_mbbox 用于预测中等尺寸物体，shape = [None, 26, 26, 255]
    conv_mbbox = common.convolutional(conv_mobj_branch, (1, 1, 512, 3*(NUM_CLASS + 5)), activate=False, bn=False)

    conv = common.convolutional(conv, (1, 1, 256, 128))
    conv = common.upsample(conv)

    conv = tf.concat([conv, route_1], axis=-1)

    conv = common.convolutional(conv, (1, 1, 384, 128))
    conv = common.convolutional(conv, (3, 3, 128, 256))
    conv = common.convolutional(conv, (1, 1, 256, 128))
    conv = common.convolutional(conv, (3, 3, 128, 256))
    conv = common.convolutional(conv, (1, 1, 256, 128))

    conv_sobj_branch = common.convolutional(conv, (3, 3, 128, 256))
    # conv_sbbox 用于预测小尺寸物体，shape = [None, 52, 52, 255]
    conv_sbbox = common.convolutional(conv_sobj_branch, (1, 1, 256, 3*(NUM_CLASS +5)), activate=False, bn=False)

    return [conv_sbbox, conv_mbbox, conv_lbbox]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-4-3-nms-处理&#34;&gt;1.4.3 NMS 处理&lt;/h3&gt;

&lt;p align=&#34;center&#34;&gt;
    &lt;img width=&#34;60%&#34; src=&#34;https://raw.githubusercontent.com/YunYang1994/tensorflow-yolov3/1551aa4734added3ad0c6979ed2ed74894cdd504/docs/images/iou.png&#34; style=&#34;max-width:60%;&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;非极大值抑制（Non-Maximum Suppression，NMS），顾名思义就是抑制不是极大值的元素，说白了就是去除掉那些重叠率较高并且 score 评分较低的边界框。 NMS 的算法非常简单，迭代流程如下:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;流程1: 判断边界框的数目是否大于0，如果不是则结束迭代；&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;流程2: 按照 socre 排序选出评分最大的边界框 A 并取出；&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;流程3: 计算这个边界框 A 与剩下所有边界框的 iou 并剔除那些 iou 值高于阈值的边界框，重复上述步骤；&lt;br&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 流程1: 判断边界框的数目是否大于0
while len(cls_bboxes) &amp;gt; 0:
    # 流程2: 按照 socre 排序选出评分最大的边界框 A
    max_ind = np.argmax(cls_bboxes[:, 4])
    # 将边界框 A 取出并剔除
    best_bbox = cls_bboxes[max_ind]
    best_bboxes.append(best_bbox)
    cls_bboxes = np.concatenate([cls_bboxes[: max_ind], cls_bboxes[max_ind + 1:]])
	# 流程3: 计算这个边界框 A 与剩下所有边界框的 iou 并剔除那些 iou 值高于阈值的边界框
    iou = bboxes_iou(best_bbox[np.newaxis, :4], cls_bboxes[:, :4])
    weight = np.ones((len(iou),), dtype=np.float32)
    iou_mask = iou &amp;gt; iou_threshold
    weight[iou_mask] = 0.0
    cls_bboxes[:, 4] = cls_bboxes[:, 4] * weight
    score_mask = cls_bboxes[:, 4] &amp;gt; 0.
    cls_bboxes = cls_bboxes[score_mask]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后所有取出来的边界框 A 就是我们想要的。不妨举个简单的例子：假如5个边界框及评分为: A: 0.9，B: 0.08，C: 0.8, D: 0.6，E: 0.5，设定的评分阈值为 0.3，计算步骤如下。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;步骤1: 边界框的个数为5，满足迭代条件；&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;步骤2: 按照 socre 排序选出评分最大的边界框 A 并取出；&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;步骤3: 计算边界框 A 与其他 4 个边界框的 iou，假设得到的 iou 值为：B: 0.1，C: 0.7, D: 0.02, E: 0.09, 剔除边界框 C；&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;步骤4: 现在只剩下边界框 B、D、E，满足迭代条件；&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;步骤5: 按照 socre 排序选出评分最大的边界框 D 并取出；&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;步骤6: 计算边界框 D 与其他 2 个边界框的 iou，假设得到的 iou 值为：B: 0.06，E: 0.8，剔除边界框 E；&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;步骤7: 现在只剩下边界框 B，满足迭代条件；&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;步骤8: 按照 socre 排序选出评分最大的边界框 B 并取出；&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;步骤9: 此时边界框的个数为零，结束迭代。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后我们得到了边界框 A、B、D，但其中边界框 B 的评分非常低，这表明该边界框是没有物体的，因此应当抛弃掉。在 postprocess_boxes 代码中，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# # (5) discard some boxes with low scores
classes = np.argmax(pred_prob, axis=-1)
scores = pred_conf * pred_prob[np.arange(len(pred_coor)), classes]
score_mask = scores &amp;gt; score_threshold
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在 YOLO 算法中，NMS 的处理有两种情况：一种是所有的预测框一起做 NMS 处理，另一种情况是分别对每个类别的预测框做 NMS 处理。后者会出现一个预测框既属于类别 A 又属于类别 B 的现象，这比较适合于一个小单元格中同时存在多个物体的情况。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;2-yolov3-损失函数的理解&#34;&gt;2. YOLOv3 损失函数的理解&lt;/h1&gt;

&lt;p&gt;对于 YOLOv3 的损失函数, Redmon J 在论文中并 没有进行讲解。但通过对 darknet 源代码的解读，总结得到 YOLOv3 的损失函数如下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/30433053/62836746-5bf43b80-bca1-11e9-85b7-7f7970cb6eb3.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;本文对原始的损失函数略有修改，请参考性使用。&lt;/p&gt;

&lt;h2 id=&#34;2-1-边界框损失&#34;&gt;2.1 边界框损失&lt;/h2&gt;

&lt;p&gt;该代码的边界框损失受 &lt;a href=&#34;https://github.com/generalized-iou/g-darknet&#34; target=&#34;_blank&#34;&gt;g-darknet&lt;/a&gt; 所启示，将原始 iou loss 替换成了 giou loss ，检测精度提高了大约 1 个百分点。&lt;/p&gt;

&lt;h3 id=&#34;2-1-1-giou-的背景介绍&#34;&gt;2.1.1 GIoU 的背景介绍&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://giou.stanford.edu/GIoU.pdf&#34; target=&#34;_blank&#34;&gt;这篇论文&lt;/a&gt; 出自于 CVPR 2019，这篇论文提出了一种优化边界框的新方式 —— GIoU (Generalized IoU，广义 IoU )。边界框一般由左上角和右下角坐标所表示，即 (x1,y1,x2,y2)。那么，你发现这其实也是一个向量。向量的距离一般可以 L1 范数或者 L2 范数来度量。但是在L1及L2范数取到相同的值时，实际上检测效果却是差异巨大的，直接表现就是预测和真实检测框的IoU值变化较大，这说明L1和L2范数不能很好的反映检测效果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/30433053/62829166-9b377380-bc32-11e9-8b9b-9e1601797d17.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;L1 范数&lt;/th&gt;
&lt;th&gt;L2 范数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/30433053/62829145-18161d80-bc32-11e9-8ec0-a26536f3ffa6.png&#34; alt=&#34;image&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/30433053/62829143-05034d80-bc32-11e9-9c8d-f0d8c3ee2d98.png&#34; alt=&#34;image&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;当 L1 或 L2 范数都相同的时候，发现 IoU 和 GIoU 的值差别都很大，这表明使用 L 范数来度量边界框的距离是不合适的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在这种情况下，学术界普遍使用 IoU 来衡量两个边界框之间的相似性。作者发现使用 IoU 会有两个缺点，导致其不太适合做损失函数：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;预测框和真实框之间没有重合时，IoU 值为 0， 导致优化损失函数时梯度也为 0，意味着无法优化。例如，场景 A 和场景 B 的 IoU 值都为 0，但是显然场景 B 的预测效果较 A 更佳，因为两个边界框的距离更近( L 范数更小)。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;场景 A&lt;/th&gt;
&lt;th&gt;场景 B&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/30433053/62829254-b6a37e00-bc34-11e9-9d3e-a8e0f3139b30.png&#34; alt=&#34;image&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/30433053/62829264-d6d33d00-bc34-11e9-9438-96366c702b6c.png&#34; alt=&#34;image&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;尽管场景 A 和场景 B 的 IoU 值都为 0，但是场景 B 的预测效果较 A 更佳，这是因为两个边界框的距离更近。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;即使预测框和真实框之间相重合且具有相同的 IoU 值时，检测的效果也具有较大差异，如下图所示。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&#34;center&#34;&gt;
    &lt;img width=&#34;60%&#34; src=&#34;https://user-images.githubusercontent.com/30433053/62829348-56add700-bc36-11e9-9129-3586fe0979bf.png&#34; style=&#34;max-width:60%;&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;上面三幅图的 IoU = 0.33， 但是 GIoU 值分别是 0.33, 0.24 和 -0.1， 这表明如果两个边界框重叠和对齐得越好，那么得到的 GIoU 值就会越高。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;2-1-2-giou-的计算过程&#34;&gt;2.1.2 GIoU 的计算过程&lt;/h3&gt;

&lt;p align=&#34;center&#34;&gt;
    &lt;img width=&#34;60%&#34; src=&#34;https://user-images.githubusercontent.com/30433053/62830993-380a0900-bc53-11e9-801b-4df7b8f25963.png&#34; style=&#34;max-width:60%;&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;the smallest enclosing convex object C&lt;/code&gt; 指的是最小闭合凸面 C，例如在上述场景 A 和 B 中，C 的形状分别为:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;场景 A&lt;/th&gt;
&lt;th&gt;场景 B&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/30433053/62831088-b5824900-bc54-11e9-8a3c-2787199974a0.png&#34; alt=&#34;image&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/30433053/62831105-dfd40680-bc54-11e9-9fd3-d3a5cbf4e57a.png&#34; alt=&#34;image&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;图中绿色包含的区域就是最小闭合凸面 C，the smallest enclosing convex object。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def bbox_giou(boxes1, boxes2):
	......
    # 计算两个边界框之间的 iou 值
    iou = inter_area / union_area
    # 计算最小闭合凸面 C 左上角和右下角的坐标
    enclose_left_up = tf.minimum(boxes1[..., :2], boxes2[..., :2])
    enclose_right_down = tf.maximum(boxes1[..., 2:], boxes2[..., 2:])
    enclose = tf.maximum(enclose_right_down - enclose_left_up, 0.0)
    # 计算最小闭合凸面 C 的面积
    enclose_area = enclose[..., 0] * enclose[..., 1]
    # 根据 GIoU 公式计算 GIoU 值
    giou = iou - 1.0 * (enclose_area - union_area) / enclose_area
    return giou
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-1-3-giou-loss-的计算&#34;&gt;2.1.3 GIoU loss 的计算&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;respond_bbox  = label[:, :, :, :, 4:5]  # 置信度，判断网格内有无物体
...
bbox_loss_scale = 2.0 - 1.0 * label_xywh[:, :, :, :, 2:3] * label_xywh[:, :, :, :, 3:4] / (input_size ** 2)
giou_loss = respond_bbox * bbox_loss_scale * (1 - giou)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;边界框的尺寸越小，bbox_loss_scale 的值就越大。实际上，我们知道 YOLOv1 里作者在 loss 里对宽高都做了开根号处理，这是为了弱化边界框尺寸对损失值的影响；&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;respond_bbox 的意思是如果网格单元中包含物体，那么就会计算边界框损失；&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;两个边界框之间的 GIoU 值越大，giou 的损失值就会越小, 因此网络会朝着预测框与真实框重叠度较高的方向去优化。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-2-置信度损失&#34;&gt;2.2 置信度损失&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;iou = bbox_iou(pred_xywh[:, :, :, :, np.newaxis, :], bboxes[:, np.newaxis, np.newaxis, np.newaxis, :, :])
# 找出与真实框 iou 值最大的预测框
max_iou = tf.expand_dims(tf.reduce_max(iou, axis=-1), axis=-1)
# 如果最大的 iou 小于阈值，那么认为该预测框不包含物体,则为背景框
respond_bgd = (1.0 - respond_bbox) * tf.cast( max_iou &amp;lt; IOU_LOSS_THRESH, tf.float32 )

conf_focal = tf.pow(respond_bbox - pred_conf, 2)
# 计算置信度的损失（我们希望假如该网格中包含物体，那么网络输出的预测框置信度为 1，无物体时则为 0。
conf_loss = conf_focal * (
        respond_bbox * tf.nn.sigmoid_cross_entropy_with_logits(labels=respond_bbox, logits=conv_raw_conf)
            +
        respond_bgd * tf.nn.sigmoid_cross_entropy_with_logits(labels=respond_bbox, logits=conv_raw_conf)
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-3-分类损失&#34;&gt;2.3 分类损失&lt;/h2&gt;

&lt;p&gt;这里分类损失采用的是二分类的交叉熵，即把所有类别的分类问题归结为是否属于这个类别，这样就把多分类看做是二分类问题。&lt;/p&gt;

&lt;p align=&#34;center&#34;&gt;
    &lt;img width=&#34;50%&#34; src=&#34;https://user-images.githubusercontent.com/30433053/62836847-8bf00e80-bca2-11e9-9af1-27c1f68580eb.png&#34; style=&#34;max-width:50%;&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;respond_bbox  = label[:, :, :, :, 4:5]
prob_loss = respond_bbox * tf.nn.sigmoid_cross_entropy_with_logits(labels=label_prob, logits=conv_raw_prob)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;讲到这里，其实关于如何判断网格内有无物体还尚未展开。要想讲清楚 respond_bbox 就必须讲明 label 是怎么来的，因为&lt;code&gt;respond_bbox  = label[:, :, :, :, 4:5]&lt;/code&gt;。那么&lt;code&gt;label&lt;/code&gt;是在 &lt;a href=&#34;https://github.com/YunYang1994/TensorFlow2.0-Examples/blob/master/4-Object_Detection/YOLOV3/core/dataset.py#L197&#34; target=&#34;_blank&#34;&gt;preprocess_true_boxes&lt;/a&gt; 函数中定义的:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(3): # 针对 3 种网格尺寸
    # 设定变量，用于存储每种网格尺寸下 3 个 anchor 框的中心位置和宽高
    anchors_xywh = np.zeros((self.anchor_per_scale, 4))
    # 将这 3 个 anchor 框都偏移至网格中心
    anchors_xywh[:, 0:2] = np.floor(bbox_xywh_scaled[i, 0:2]).astype(np.int32) + 0.5
    # 填充这 3 个 anchor 框的宽和高
    anchors_xywh[:, 2:4] = self.anchors[i]
    # 计算真实框与 3 个 anchor 框之间的 iou 值
    iou_scale = self.bbox_iou(bbox_xywh_scaled[i][np.newaxis, :], anchors_xywh)
    iou.append(iou_scale)
    # 找出 iou 值大于 0.3 的 anchor 框
    iou_mask = iou_scale &amp;gt; 0.3
    exist_positive = False
    if np.any(iou_mask): # 规则 1: 对于那些 iou &amp;gt; 0.3 的 anchor 框，做以下处理
    	# 根据真实框的坐标信息来计算所属网格左上角的位置
        xind, yind = np.floor(bbox_xywh_scaled[i, 0:2]).astype(np.int32)

        label[i][yind, xind, iou_mask, :] = 0
        # 填充真实框的中心位置和宽高
        label[i][yind, xind, iou_mask, 0:4] = bbox_xywh
        # 设定置信度为 1.0，表明该网格包含物体
        label[i][yind, xind, iou_mask, 4:5] = 1.0
        # 设置网格内 anchor 框的类别概率，做平滑处理
        label[i][yind, xind, iou_mask, 5:] = smooth_onehot
        
        exist_positive = True
    if not exist_positive: # 规则 2: 所有 iou 都不大于0.3， 那么只能选择 iou 最大的
    	best_anchor_ind = np.argmax(np.array(iou).reshape(-1), axis=-1)
    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的过程，其实是一个生产出很多 Anchor 并将它们标定为正负样本的过程：&lt;/p&gt;

&lt;p&gt;1) 如果 Anchor 与 Ground-truth Bounding Boxes 的 IoU &amp;gt; 0.3，标定为正样本;&lt;br&gt;&lt;br /&gt;
2) 在第 1 种规则下基本能够产生足够多的样本，但是如果它们的 iou 不大于 0.3，那么只能把 iou 最大的那个 Anchor 标记为正样本。&lt;/p&gt;

&lt;p&gt;按照上面两种规则标记出正样本后，剩下的都是负样本了。这些负样本是不会参与到边界框损失和分类损失的计算中去，而只会参与到置信度损失的计算（因为你需要告诉神经网络什么是负样本）。在这里，你不必纠结 Anchor 是否能准确地框到物体。你只要关心 Anchor 能不能框到物体，如果框到很多了(比如iou&amp;gt;0.3)，那么它就是个正样本了，否则就不是了。 后面的损失函数会进一步告诉神经网络怎么去做精确的尺寸和位置回归，并给出一个评分。最后，那些评分比较低和重叠度较高的预测框就会被 NMS 算法给过滤掉。&lt;/p&gt;

&lt;h1 id=&#34;3-yolov3-的训练技巧&#34;&gt;3. YOLOv3 的训练技巧&lt;/h1&gt;

&lt;h2 id=&#34;3-1-权重初始化设置&#34;&gt;3.1 权重初始化设置&lt;/h2&gt;

&lt;p&gt;训练神经网络尤其是深度神经网络所面临的一个问题是，梯度消失或梯度爆炸，也就是说 当你训练深度网络时，导数或坡度有时会变得非常大，或非常小甚至以指数方式变小，这个时候我们看到的损失就会变成了 NaN。假设你正在训练下面这样一个极深的神经网络，为了简单起见，这里激活函数 g(z) = z 并且忽略偏置参数。&lt;/p&gt;

&lt;p align=&#34;center&#34;&gt;
    &lt;img width=&#34;60%&#34; src=&#34;https://user-images.githubusercontent.com/30433053/63148053-94de3880-c032-11e9-873e-7fc8f033f3fc.png&#34; style=&#34;max-width:80%;&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/30433053/63182071-393c9b00-c084-11e9-89a3-0e7f9aecf051.png&#34; alt=&#34;image&#34; /&gt;&lt;br /&gt;
其实这里直观的理解是：如果权重 W 只比 1 略大一点，或者说只比单位矩阵大一点，深度神经网络的输出将会以爆炸式增长，而如果 W 比 1 略小一点，可能是 0.9, 0.9，每层网络的输出值将会以指数级递减。因此合适的初始化权重值就显得尤为重要! 下面就写个简单的代码给大家演示一下。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt

x = np.random.randn(2000, 800) * 0.01 # 制作输入数据
stds = [0.1, 0.05, 0.01, 0.005, 0.001] # 尝试使用不同标准差，这样初始权重大小也不一样

for i, std in enumerate(stds):
    # 第一层全连接层
    dense_1 = tf.keras.layers.Dense(750, kernel_initializer=tf.random_normal_initializer(std), activation=&#39;tanh&#39;)
    output_1 = dense_1(x)
    # 第二层全连接层
    dense_2 = tf.keras.layers.Dense(700, kernel_initializer=tf.random_normal_initializer(std), activation=&#39;tanh&#39;)
    output_2 = dense_2(output_1)
    # 第三层全连接层
    dense_3 = tf.keras.layers.Dense(650, kernel_initializer=tf.random_normal_initializer(std), activation=&#39;tanh&#39;)
    output_3 = dense_3(output_2).numpy().flatten()

    plt.subplot(1, len(stds), i+1)
    plt.hist(output_3, bins=60, range=[-1, 1])
    plt.xlabel(&#39;std = %.3f&#39; %std)
    plt.yticks([])
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/30433053/63147337-5fd0e680-c030-11e9-989e-7e97127d105f.png&#34; alt=&#34;image&#34; /&gt;&lt;br /&gt;
我们可以看到当标准差较大( std = 0.1 和 0.05 )时，几乎所有的输出值集中在 -1 或1 附近，这表明此时的神经网络发生了梯度爆炸；当标准差较小( std = 0.005 和 0.001）时，我们看到输出值迅速向 0 靠拢，这表明此时的神经网络发生了梯度消失。其实笔者也曾在 YOLOv3 网络里做过实验，初始化权重的标准差如果太大或太小，都容易出现 NaN 。不信，你可以试试看啰？&lt;/p&gt;

&lt;p&gt;Xavier initialization 可以解决上面的问题！其初始化方式也并不复杂。Xavier初始化的基本思想是保持输入和输出的方差一致，这样就避免了所有输出值都趋向于零。Xavier initialization 的实现很简单，初始化与输入和输出节点有关。&lt;/p&gt;

&lt;p&gt;其实在 &lt;a href=&#34;https://keras-cn.readthedocs.io/en/latest/other/initializations/&#34; target=&#34;_blank&#34;&gt;keras 实现&lt;/a&gt;中很简单，Xavier 正态分布初始化，也称作 Glorot 正态分布初始化方法，参数由0均值，标准差为sqrt(2 / (fan_in + fan_out))的正态分布产生，其中fan_in和fan_out是权重张量的扇入扇出（即输入和输出单元数目）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt

x = np.random.randn(2000, 800)

for i in range(10):
    dense = tf.keras.layers.Dense(750, kernel_initializer=&amp;quot;glorot_normal&amp;quot;, activation=&#39;tanh&#39;)
    output = dense(x)
    x = output

    plt.subplot(1, 10, i+1)
    plt.hist(output.numpy().flatten(), bins=60, range=[-1, 1])
    plt.xlabel(&amp;quot;layer %d&amp;quot; %(i+1))
    plt.yticks([])
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/30433053/63184703-8ae82400-c08a-11e9-9f94-7d0319422ce6.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;输出值在很多层之后依然保持着良好的分布，这很有利于我们优化神经网络。但是这个例子仅仅说明它对 tanh 很有效。那么，假如我们使用 relu 激活函数结果会如何呢？&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这里我就不贴代码了，你就在上面代码的基础上将 &#39;tanh&#39; 替换成 &#39;relu&#39; 就好了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/30433053/63185267-2e860400-c08c-11e9-8f52-91e444a3e6ce.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;前面看起来还不错，后面的趋势却是越来越接近零。幸运的是，He initialization 可以用来解决 relu 初始化的问题。He 正态分布初始化方法，参数由 0 均值，标准差为 sqrt(2 / fan_in) 的正态分布产生，其中fan_in权重张量的扇入。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这里我就不贴代码了，你就在上面代码的基础上将 &#39;glorot_normal&#39; 替换成 &#39;he_normal&#39; 就好了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/30433053/63185644-1d89c280-c08d-11e9-9cb3-b7134a98e016.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;看起来效果比之前好很多了！&lt;/p&gt;

&lt;h2 id=&#34;3-2-学习率的设置&#34;&gt;3.2 学习率的设置&lt;/h2&gt;

&lt;p&gt;学习率是最影响性能的超参数之一，如果我们只能调整一个超参数，那么最好的选择就是它。 其实在我们的大多数的炼丹过程中，遇到 loss 变成 NaN 的情况大多数是由于学习率选择不当引起的。有句话讲得好啊，步子大了容易扯到蛋。由于神经网络在刚开始训练的时候是非常不稳定的，因此刚开始的学习率应当设置得很低很低，这样可以保证网络能够具有良好的收敛性。但是较低的学习率会使得训练过程变得非常缓慢，因此这里会采用以较低学习率逐渐增大至较高学习率的方式实现网络训练的“热身”阶段，称为 warmup stage。但是如果我们使得网络训练的 loss 最小，那么一直使用较高学习率是不合适的，因为它会使得权重的梯度一直来回震荡，很难使训练的损失值达到全局最低谷。因此最后采用了&lt;a href=&#34;https://arxiv.org/pdf/1812.01187.pdf&#34; target=&#34;_blank&#34;&gt;这篇论文&lt;/a&gt;里的 cosine 的衰减方式，这个阶段可以称为 consine decay stage。&lt;/p&gt;

&lt;p align=&#34;center&#34;&gt;
    &lt;img width=&#34;40%&#34; src=&#34;https://user-images.githubusercontent.com/30433053/63214012-aebc7000-c145-11e9-8f22-81de9a5bac51.png&#34; style=&#34;max-width:40%;&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;直接现场来看代码吧！&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;        if global_steps &amp;lt; warmup_steps:
            lr = global_steps / warmup_steps *cfg.TRAIN.LR_INIT
        else:
            lr = cfg.TRAIN.LR_END + 0.5 * (cfg.TRAIN.LR_INIT - cfg.TRAIN.LR_END) * (
                (1 + tf.cos((global_steps - warmup_steps) / (total_steps - warmup_steps) * np.pi))
            )
&lt;/code&gt;&lt;/pre&gt;

&lt;p align=&#34;center&#34;&gt;
    &lt;img width=&#34;60%&#34; src=&#34;https://user-images.githubusercontent.com/30433053/63213822-761b9700-c143-11e9-9c16-4473a579f931.png&#34; style=&#34;max-width:60%;&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在 warmup（学习率上升）阶段，学习率渐渐增大是为了避免 Nan 的情况。如果你的 loss 出现了 Nan，不妨增大 warmup epochs 或者减小学习率？&lt;br /&gt;
在 decay（学习率下降）阶段，学习率逐渐变小是为了尽量使得网络训练的 loss 到达最低谷。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;3-3-加载预训练模型&#34;&gt;3.3 加载预训练模型&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;其实加载预训练模型，也是避免梯度溢出的一种有效方式。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;目前针对目标检测的主流做法是基于 Imagenet 数据集预训练的模型来提取特征，然后在 COCO 数据集进行目标检测fine-tunning训练（比如 yolo 算法)，也就是大家常说的迁移学习。其实迁移学习是建立在数据集分布相似的基础上的，像 &lt;a href=&#34;https://github.com/YunYang1994/yymnist&#34; target=&#34;_blank&#34;&gt;yymnist&lt;/a&gt; 这种与 COCO 数据集分布完全不同的情况，就没有必要加载 COCO 预训练模型的必要了吧。&lt;/p&gt;

&lt;p&gt;在 tensorflow-yolov3 版本里，由于 README 里训练的是 VOC 数据集，因此推荐加载预训练模型。由于在 YOLOv3 网络的三个分支里的最后卷积层与训练的类别数目有关，因此除掉这三层的网络权重以外，其余所有的网络权重都加载进来了。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我加载的是作者已经训练好的网络，因此可以这么干。但事实上作者是利用 darknet53 网络在 Imagenet 数据集上进行分类训练得到 darknet53.conv.74 权重后，再加载至 YOLOv3 网络里进行目标检测训练的！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;	# 第一阶段训练：仅仅训练三个分支的最后卷积层
        with tf.name_scope(&amp;quot;define_first_stage_train&amp;quot;):
            self.first_stage_trainable_var_list = []
            for var in tf.trainable_variables():
                var_name = var.op.name
                var_name_mess = str(var_name).split(&#39;/&#39;)
                if var_name_mess[0] in [&#39;conv_sbbox&#39;, &#39;conv_mbbox&#39;, &#39;conv_lbbox&#39;]:
                    self.first_stage_trainable_var_list.append(var)

            first_stage_optimizer = tf.train.AdamOptimizer(self.learn_rate).minimize(self.loss,
                                                      var_list=self.first_stage_trainable_var_list)
            with tf.control_dependencies(tf.get_collection(tf.GraphKeys.UPDATE_OPS)):
                with tf.control_dependencies([first_stage_optimizer, global_step_update]):
                    with tf.control_dependencies([moving_ave]):
                        self.train_op_with_frozen_variables = tf.no_op()
	# 第二阶段训练：训练所有的层，其实也就是 fine-tunning 阶段
        with tf.name_scope(&amp;quot;define_second_stage_train&amp;quot;):
            second_stage_trainable_var_list = tf.trainable_variables()
            second_stage_optimizer = tf.train.AdamOptimizer(self.learn_rate).minimize(self.loss,
                                                      var_list=second_stage_trainable_var_list)

            with tf.control_dependencies(tf.get_collection(tf.GraphKeys.UPDATE_OPS)):
                with tf.control_dependencies([second_stage_optimizer, global_step_update]):
                    with tf.control_dependencies([moving_ave]):
                        self.train_op_with_all_variables = tf.no_op()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面是在 PASCAL VOC 2012 上比赛刷的成绩，可是进了&lt;strong&gt;前十名&lt;/strong&gt;哦！觉得讲得不错就点个 star 吧, 谢谢啦!&lt;br /&gt;
&lt;img src=&#34;https://user-images.githubusercontent.com/33013904/58227054-dd4fc800-7d5b-11e9-85aa-67854292fbe0.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;题外话：我正在利用业余时间复现一些经典的算法，并且也会抽空写出类似这样的技术博客，请多多关注，大家一起进步！如果你对我这些工作很感兴趣，欢迎加入！&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/YunYang1994/TensorFlow2.0-Examples&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;https://github.com/YunYang1994/TensorFlow2.0-Examples&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/YunYang1994/ai-notebooks/blob/master/RPN.md&#34; target=&#34;_blank&#34;&gt;【推荐: Faster-RCNN 里的 RPN 网络解读, TensorFlow2.0-Examples/4-Object_Detection/RPN】&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>BT1120 (12bit), BT656(8bit),和 Raw data (12bit)</title>
            <link>/hardware/hisilicon/hi3516-bt1120_bt656_8bit/</link>
            <pubDate>Sat, 22 Feb 2020 15:23:53 CST</pubDate>
            <author>rinetd</author>
            <guid>/hardware/hisilicon/hi3516-bt1120_bt656_8bit/</guid>
            <description>&lt;p&gt;imx290的2lane需要改寄存器配置，mpp里对应的lane做相应修改。可以同时采集8路2lane&lt;/p&gt;

&lt;p&gt;imx178是从hi3516移植过来的，要移植isp算法，寄存器配置，mpp里增加lvds采集的配置。&lt;/p&gt;

&lt;p&gt;bt1120需要注意load脚本，dev选择、不用isp。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_41235515/article/details/81116466?depth_1-&#34; target=&#34;_blank&#34;&gt;海思3516A bt1120 视频输入相关总结_网络_qq_41235515的博客-CSDN博客&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/xjhhjx/article/details/80291130&#34; target=&#34;_blank&#34;&gt;BT656跟BT1120和BT709有什么区别_xjhhjx的专栏-CSDN博客&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;601是SDTV的数据结构 656是SDTV的interface&lt;br /&gt;
709是HDTV的数据结构 1120是HDTV的interface&lt;br /&gt;
从数据结构上 都是Y Cb Cr&lt;br /&gt;
只是SDTV用4:2:2&lt;br /&gt;
HDTV用4:2:0&lt;br /&gt;
interface上 其实是一样的 vclk + vid[9:0] 10bit-mode 或者 8bit-mode&lt;br /&gt;
主要差异是在vclk的频率上 也就是&lt;a href=&#34;https://yq.aliyun.com/go/articleRenderRedirect?url=http%3A%2F%2Fzhidao.baidu.com%2Fsearch%3Fword%3D%25E9%2587%2587%25E6%25A0%25B7%25E9%25A2%2591%25E7%258E%2587%26amp%3Bfr%3Dqb_search_exp%26amp%3Bie%3Dutf8&#34; target=&#34;_blank&#34;&gt;采样频率&lt;/a&gt;&lt;br /&gt;
656是27Mhz&lt;br /&gt;
1120 是72Mhz 或者 74Mhz&lt;br /&gt;
有些疑惑的地方：&lt;br /&gt;
1、HDTV也是4：2：2&lt;br /&gt;
2、数据&lt;a href=&#34;https://yq.aliyun.com/go/articleRenderRedirect?url=http%3A%2F%2Fzhidao.baidu.com%2Fsearch%3Fword%3D%25E9%2587%2587%25E6%25A0%25B7%25E7%258E%2587%26amp%3Bfr%3Dqb_search_exp%26amp%3Bie%3Dutf8&#34; target=&#34;_blank&#34;&gt;采样率&lt;/a&gt;，SDTV是27M；HDTV，根据&lt;a href=&#34;https://yq.aliyun.com/go/articleRenderRedirect?url=http%3A%2F%2Fzhidao.baidu.com%2Fsearch%3Fword%3D%25E5%25B8%25A7%25E7%258E%2587%26amp%3Bfr%3Dqb_search_exp%26amp%3Bie%3Dutf8&#34; target=&#34;_blank&#34;&gt;帧率&lt;/a&gt;不同有变化；支持逐行和隔行两种；典型的&lt;a href=&#34;https://yq.aliyun.com/go/articleRenderRedirect?url=http%3A%2F%2Fzhidao.baidu.com%2Fsearch%3Fword%3D%25E5%25B8%25A7%25E7%258E%2587%26amp%3Bfr%3Dqb_search_exp%26amp%3Bie%3Dutf8&#34; target=&#34;_blank&#34;&gt;帧率&lt;/a&gt;有60/30；还有隔行的60，50；具体可以看协议；&lt;br /&gt;
对于60/30，&lt;a href=&#34;https://yq.aliyun.com/go/articleRenderRedirect?url=http%3A%2F%2Fzhidao.baidu.com%2Fsearch%3Fword%3D%25E9%2587%2587%25E6%25A0%25B7%25E7%258E%2587%26amp%3Bfr%3Dqb_search_exp%26amp%3Bie%3Dutf8&#34; target=&#34;_blank&#34;&gt;采样率&lt;/a&gt;分别是74.25和148.5M；&lt;br /&gt;
对应到串行数据传输，就是1.425G和2.97G&lt;br /&gt;
3、420格式，用于压缩算法&lt;/p&gt;

&lt;p&gt;TU-R BT.601和ITU-RBT.656国际电信联盟（International Telecommunication Union）无线通信部门（ITU-R）制定的标准。严格来说，ITU-R BT.656应该是隶属ITU-R BT.601的一个子协议。ITU-R BT.601是演播室数字电视编码参数标准，而ITU-R BT.656 则是ITU-R BT.601附件A中的数字接口标准，用于主要数字视频设备(包括芯片)之间采用27Mhzs并口或243Mbs串行接口的数字传输接口标准。BT.656并行接口除了传输4:2:2的YCbCr视频数据流外，还有行、列同步所用的控制信号。&lt;/p&gt;

&lt;p&gt;ITU-R BT.601 16位数据传输；Y、U、V信号同时传输，是并行数据，行场同步单独输出。&lt;br /&gt;
ITU-R BT.656 8/10位数据传输；不需要同步信号；串行数据传输；传输速率是601的2倍；先传Y，后传UV。行场同步信号嵌入在数据流中。&lt;/p&gt;

&lt;p&gt;ITU-R BT.656包含三部分&lt;br /&gt;
1：视频信号&lt;br /&gt;
2：定时基准信号：&lt;/p&gt;

&lt;p&gt;有两个定时基准信号，一个在每个视频数据块的开始(Start of ActiveVideo，SAV)，另一个在每个视频数据块的结束(End of Active Video，EAV)；每个定时基准信号由4 个字的序列组成，格式如下： FF 00 00 XY （16 进制）头三个是固定前缀，第4 个字包含定义第二场标识、场消隐状态和行消隐状态的信息。XY(MSB9-0)[1,F,V,H,P3,P2,P1,P0,0,0]&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://hi.csdn.net/attachment/201107/20/0_13111417305Ob9.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;3：辅助信号：&lt;/p&gt;

&lt;p&gt;辅助数据信号可以以10 比特形式只在行消隐期间传送，还可以以8 比特形式只在场消隐中的行的有效期间传送。＼&lt;/p&gt;

&lt;p&gt;[](&lt;a href=&#34;https://yq.aliyun.com/go/articleRenderRedirect?url=http%3A%2F%2Fyuahibo.blog.163.com%2Fblog%2Fstatic%2F140011928201022002014584%2F&#34; target=&#34;_blank&#34;&gt;https://yq.aliyun.com/go/articleRenderRedirect?url=http%3A%2F%2Fyuahibo.blog.163.com%2Fblog%2Fstatic%2F140011928201022002014584%2F&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;656输出的是串行数据，行场同步信号嵌入在数据流中；&lt;/p&gt;

&lt;p&gt;601是并行数据，行场同步有单独输出;&lt;/p&gt;

&lt;p&gt;656只是数据传输接口而已，可以说是作为601的一个传输方式。&lt;/p&gt;

&lt;p&gt;简单的说ITU-R BT.601是&amp;quot;演播室数字电视编码参数&amp;quot;标准,而ITU-R BT.656则是ITU-R BT.601附件A中的数字接口标准,用于主要数字视频设备(包括芯片)之间采用27Mhz/s并口或243Mb/s串行接口的数字传输接口标准.&lt;/p&gt;

&lt;p&gt;BT656内同步总线为8根，而BT1120的内同步总线为12根！&lt;/p&gt;

&lt;p&gt;4、ITU BT 601与ITU BT656 的区别&lt;br /&gt;
关于这两种信号的区别：&lt;br /&gt;
ITU-R BT 601: 16位数据传输；21芯；Y、U、V信号同时传输。&lt;br /&gt;
ITU-R BT 656: 9芯，不需要同步信号；8位数据传输；串行视频传输；传输速率是601的2倍；先传Y，后传UV。656输出的是串行数据，行场同步信号嵌入在数据流中、 601是并行数据，行场同步有单独输出;656只是数据传输接口而已，可以说是作为601的一个传输方式。简单的说ITU-R BT.601是\&amp;quot;演播室数字电视编码参数\&amp;quot;标准,而ITU-R BT.656 则是ITU-R BT.601附件A中的数字接口标准,用于主要数字视频设备(包括芯 片)之间采用27Mhz/s并口或243Mb/s串行接口的数字传输接口标准.&lt;/p&gt;

&lt;p&gt;比较DM365和DM6467两款芯片在处理YUV图像时的区别，这个对于要处理像TVP5158多通道图像输入或直接播放视频文件时有重要作用。&lt;/p&gt;

&lt;p&gt;下图是DM6467的视频接口处理前端&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://hi.csdn.net/attachment/201201/3/0_1325586261HH4B.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;由上图可以看出，模拟视频数据经过解码器处理后输出符合标准(BT656/BT1120)的YCbCr数据，处理器通过VPIF接收数据，并存放于DDR内。&lt;/p&gt;

&lt;p&gt;TI的几款达芬奇处理器对于接收YCbCr数据和存放数据的方式是不一样的，下面来分别解析几种YUV数据的存放方式。&lt;/p&gt;

&lt;p&gt;1.YUV422 Planar&lt;/p&gt;

&lt;p&gt;这里,Y\U\V数据是分开存放的,每两个水平Y采样点，有一个Cb和一个Cr采样点，如下图。(DM6467不支持这种格式)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://hi.csdn.net/attachment/201201/3/0_132558626777Gg.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;2.YUV420 Planar&lt;/p&gt;

&lt;p&gt;这个格式跟YUV422 Planar 类似，但对于Cb和Cr的采样在水平和垂直方向都减少为2:1，如下图。(DM6467不支持这种格式)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://hi.csdn.net/attachment/201201/3/0_1325586271N1M1.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;3.YUV422 Semi-Planar&lt;/p&gt;

&lt;p&gt;这个格式的数据量跟YUV422 Planar的一样，但是U、V是交叉存放的，如下图。(DM6467在 录制 或 播放 视频图像数据时都是使用这种格式)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://hi.csdn.net/attachment/201201/3/0_1325586276pVMu.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;4.YUV420 Semi-Planar&lt;/p&gt;

&lt;p&gt;这个格式的数据量跟YUV420 Planar的一样，但是U、V是交叉存放的，如下图。(DM6467在编解码、压缩视频图像数据时都是使用这种格式，所以对YUV422 Semi-Planar数据进行编解码处理前可以使用VDCE进行转换缩放)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://hi.csdn.net/attachment/201201/3/0_1325586282dGks.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;5.YUV422 Interleaved&lt;/p&gt;

&lt;p&gt;这个格式的数据量跟YUV422 Planar的一样，但是Y、U、V是交叉存放的，如下图。(DM6467不支持这个格式。其它TI芯片，像DM6446\DM365\DM355在某些模式下是&lt;/p&gt;

&lt;p&gt;使用这种格式的，例如DM365在接收TVP5146/TVP5158时就是使用这种格式)&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>python xml obj_num</title>
            <link>/language/python/python-xml-obj_num/</link>
            <pubDate>Sat, 22 Feb 2020 14:36:30 CST</pubDate>
            <author>rinetd</author>
            <guid>/language/python/python-xml-obj_num/</guid>
            <description>&lt;p&gt;之前写了一个matlab的，越用越觉得麻烦，如果不同数据集要改类别数目，而且运行速度慢。所以重新写了一个Python的，直接读取xml文件夹路径就可以，不用预先知道类别，直接能够检测出所有类别的目标名称及其对应的数量。&lt;/p&gt;

&lt;p&gt;分享出来给大家。&lt;/p&gt;

&lt;p&gt;代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# -*- coding:utf-8 -*-
import os
import xml.etree.ElementTree as ET
import numpy as np
np.set_printoptions(suppress=True, threshold=np.nan)
import matplotlib
from PIL import Image
 
def parse_obj(xml_path, filename):
  tree=ET.parse(xml_path+filename)
  objects=[]
  for obj in tree.findall(&#39;object&#39;):
    obj_struct={}
    obj_struct[&#39;name&#39;]=obj.find(&#39;name&#39;).text
    objects.append(obj_struct)
  return objects
 
 
def read_image(image_path, filename):
  im=Image.open(image_path+filename)
  W=im.size[0]
  H=im.size[1]
  area=W*H
  im_info=[W,H,area]
  return im_info
 
 
if __name__ == &#39;__main__&#39;:
  xml_path=&#39;C:/Users/nansbas/Desktop/hebin/03/&#39;
  filenamess=os.listdir(xml_path)
  filenames=[]
  for name in filenamess:
    name=name.replace(&#39;.xml&#39;,&#39;&#39;)
    filenames.append(name)
  recs={}
  obs_shape={}
  classnames=[]
  num_objs={}
  obj_avg={}
  for i,name in enumerate(filenames):
    recs[name]=parse_obj(xml_path, name+ &#39;.xml&#39; )
  for name in filenames:
    for object in recs[name]:
      if object[&#39;name&#39;] not in num_objs.keys():
         num_objs[object[&#39;name&#39;]]=1
      else:
         num_objs[object[&#39;name&#39;]]+=1
      if object[&#39;name&#39;] not in classnames:
         classnames.append(object[&#39;name&#39;])
  for name in classnames:
    print(&#39;{}:{}个&#39;.format(name,num_objs[name]))
  print(&#39;信息统计算完毕。&#39;)
 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;————————————————&lt;br /&gt;
版权声明：本文为CSDN博主「南石北岸生」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。&lt;br /&gt;
原文链接：&lt;a href=&#34;https://blog.csdn.net/gusui7202/article/details/86583444&#34; target=&#34;_blank&#34;&gt;https://blog.csdn.net/gusui7202/article/details/86583444&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>python Python对目标检测数据集xml文件操作（统计目标种类、数量、面积、比例等&amp;修改目标名字）</title>
            <link>/language/python/python-xml-tongji/</link>
            <pubDate>Sat, 22 Feb 2020 14:35:22 CST</pubDate>
            <author>rinetd</author>
            <guid>/language/python/python-xml-tongji/</guid>
            <description>

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_43384257/article/details/100581673?depth_1-utm_source=distribute.pc_relevant.none-task&amp;amp;utm_source=distribute.pc_relevant.none-task#1&#34; target=&#34;_blank&#34;&gt;1. 根据xml文件统计目标种类以及数量&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://blog.csdn.net/weixin_43384257/article/details/100581673?depth_1-utm_source=distribute.pc_relevant.none-task&amp;amp;utm_source=distribute.pc_relevant.none-task#2&#34; target=&#34;_blank&#34;&gt;2.根据xml文件统计目标的平均长度、宽度、面积以及每一个目标在原图中的占比&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://blog.csdn.net/weixin_43384257/article/details/100581673?depth_1-utm_source=distribute.pc_relevant.none-task&amp;amp;utm_source=distribute.pc_relevant.none-task#3&#34; target=&#34;_blank&#34;&gt;3.修改xml文件中某个目标的名字为另一个名字&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;1-根据xml文件统计目标种类以及数量&#34;&gt;1. 根据xml文件统计目标种类以及数量&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-prism&#34;&gt;# -*- coding:utf-8 -*-
#根据xml文件统计目标种类以及数量
import os
import xml.etree.ElementTree as ET
import numpy as np
np.set_printoptions(suppress=True, threshold=np.nan)
import matplotlib
from PIL import Image

def parse_obj(xml_path, filename):
  tree=ET.parse(xml_path+filename)
  objects=[]
  for obj in tree.findall(&#39;object&#39;):
    obj_struct={}
    obj_struct[&#39;name&#39;]=obj.find(&#39;name&#39;).text
    objects.append(obj_struct)
  return objects


def read_image(image_path, filename):
  im=Image.open(image_path+filename)
  W=im.size[0]
  H=im.size[1]
  area=W*H
  im_info=[W,H,area]
  return im_info


if __name__ == &#39;__main__&#39;:
  xml_path=&#39;/home/dlut/网络/make_database/数据集——合集/VOCdevkit/VOC2018/Annotations/&#39;
  filenamess=os.listdir(xml_path)
  filenames=[]
  for name in filenamess:
    name=name.replace(&#39;.xml&#39;,&#39;&#39;)
    filenames.append(name)
  recs={}
  obs_shape={}
  classnames=[]
  num_objs={}
  obj_avg={}
  for i,name in enumerate(filenames):
    recs[name]=parse_obj(xml_path, name+ &#39;.xml&#39; )
  for name in filenames:
    for object in recs[name]:
      if object[&#39;name&#39;] not in num_objs.keys():
         num_objs[object[&#39;name&#39;]]=1
      else:
         num_objs[object[&#39;name&#39;]]+=1
      if object[&#39;name&#39;] not in classnames:
         classnames.append(object[&#39;name&#39;])
  for name in classnames:
    print(&#39;{}:{}个&#39;.format(name,num_objs[name]))
  print(&#39;信息统计算完毕。&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/2019090617224162.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-根据xml文件统计目标的平均长度-宽度-面积以及每一个目标在原图中的占比&#34;&gt;2.根据xml文件统计目标的平均长度、宽度、面积以及每一个目标在原图中的占比&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-prism&#34;&gt;# -*- coding:utf-8 -*-
#统计
# 计算每一个目标在原图中的占比
# 计算目标的平均长度、
# 计算平均宽度，
# 计算平均面积、
# 计算目标平均占比

import os
import xml.etree.ElementTree as ET
import numpy as np

#np.set_printoptions(suppress=True, threshold=np.nan)  #10,000,000
np.set_printoptions(suppress=True, threshold=10000000)  #10,000,000
import matplotlib
from PIL import Image

def parse_obj(xml_path, filename):
    tree = ET.parse(xml_path + filename)
    objects = []
    for obj in tree.findall(&#39;object&#39;):
        obj_struct = {}
        obj_struct[&#39;name&#39;] = obj.find(&#39;name&#39;).text
        bbox = obj.find(&#39;bndbox&#39;)
        obj_struct[&#39;bbox&#39;] = [int(bbox.find(&#39;xmin&#39;).text),
                              int(bbox.find(&#39;ymin&#39;).text),
                              int(bbox.find(&#39;xmax&#39;).text),
                              int(bbox.find(&#39;ymax&#39;).text)]
        objects.append(obj_struct)
    return objects

def read_image(image_path, filename):
    im = Image.open(image_path + filename)
    W = im.size[0]
    H = im.size[1]
    area = W * H
    im_info = [W, H, area]
    return im_info

if __name__ == &#39;__main__&#39;:
    image_path = &#39;/home/dlut/网络/make_database/数据集——合集/VOCdevkit/VOC2018/JPEGImages/&#39;
    xml_path = &#39;/home/dlut/网络/make_database/数据集——合集/VOCdevkit/VOC2018/Annotations/&#39;
    filenamess = os.listdir(xml_path)
    filenames = []
    for name in filenamess:
        name = name.replace(&#39;.xml&#39;, &#39;&#39;)
        filenames.append(name)
    print(filenames)
    recs = {}
    ims_info = {}
    obs_shape = {}
    classnames = []
    num_objs={}
    obj_avg = {}
    for i, name in enumerate(filenames):
        print(&#39;正在处理 {}.xml &#39;.format(name))
        recs[name] = parse_obj(xml_path, name + &#39;.xml&#39;)
        print(&#39;正在处理 {}.jpg &#39;.format(name))
        ims_info[name] = read_image(image_path, name + &#39;.jpg&#39;)
    print(&#39;所有信息收集完毕。&#39;)
    print(&#39;正在处理信息......&#39;)
    for name in filenames:
        im_w = ims_info[name][0]
        im_h = ims_info[name][1]
        im_area = ims_info[name][2]
        for object in recs[name]:
            if object[&#39;name&#39;] not in num_objs.keys():
                num_objs[object[&#39;name&#39;]] = 1
            else:
                num_objs[object[&#39;name&#39;]] += 1
            #num_objs += 1
            ob_w = object[&#39;bbox&#39;][2] - object[&#39;bbox&#39;][0]
            ob_h = object[&#39;bbox&#39;][3] - object[&#39;bbox&#39;][1]
            ob_area = ob_w * ob_h
            w_rate = ob_w / im_w
            h_rate = ob_h / im_h
            area_rate = ob_area / im_area
            if not object[&#39;name&#39;] in obs_shape.keys():
                obs_shape[object[&#39;name&#39;]] = ([[ob_w,
                                               ob_h,
                                               ob_area,
                                               w_rate,
                                               h_rate,
                                               area_rate]])
            else:
                obs_shape[object[&#39;name&#39;]].append([ob_w,
                                                  ob_h,
                                                  ob_area,
                                                  w_rate,
                                                  h_rate,
                                                  area_rate])
        if object[&#39;name&#39;] not in classnames:
            classnames.append(object[&#39;name&#39;])  # 求平均

    for name in classnames:
        obj_avg[name] = (np.array(obs_shape[name]).sum(axis=0)) / num_objs[name]
        print(&#39;{}的情况如下：*******\n&#39;.format(name))
        print(&#39;  目标平均W={}&#39;.format(obj_avg[name][0]))
        print(&#39;  目标平均H={}&#39;.format(obj_avg[name][1]))
        print(&#39;  目标平均area={}&#39;.format(obj_avg[name][2]))
        print(&#39;  目标平均与原图的W比例={}&#39;.format(obj_avg[name][3]))
        print(&#39;  目标平均与原图的H比例={}&#39;.format(obj_avg[name][4]))
        print(&#39;  目标平均原图面积占比={}\n&#39;.format(obj_avg[name][5]))
    print(&#39;信息统计计算完毕。&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;1&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;3&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;4&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;5&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;6&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;7&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;8&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;9&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;10&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;11&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;12&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;13&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;14&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;15&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;16&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;17&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;18&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;19&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;20&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;21&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;22&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;23&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;24&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;25&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;26&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;27&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;28&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;29&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;30&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;31&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;32&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;33&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;34&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;35&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;36&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;37&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;38&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;39&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;40&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;41&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;42&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;43&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;44&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;45&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;46&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;47&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;48&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;49&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;50&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;51&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;52&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;53&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;54&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;55&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;56&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;57&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;58&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;59&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;60&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;61&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;62&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;63&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;64&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;65&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;66&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;67&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;68&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;69&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;70&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;71&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;72&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;73&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;74&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;75&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;76&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;77&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;78&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;79&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;80&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;81&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;82&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;83&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;84&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;85&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;86&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;87&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;88&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;89&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;90&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;91&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;92&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;93&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;94&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;95&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;96&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;97&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;98&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;99&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;100&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;101&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;102&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;103&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;104&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;105&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;106&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;107&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;108&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20190906172259477.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-修改xml文件中某个目标的名字为另一个名字&#34;&gt;3.修改xml文件中某个目标的名字为另一个名字&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-prism&#34;&gt;#修改xml文件中的目标的名字，
import os, sys
import glob
from xml.etree import ElementTree as ET

# 批量读取Annotations下的xml文件
# per=ET.parse(r&#39;C:\Users\rockhuang\Desktop\Annotations\000003.xml&#39;)
xml_dir = r&#39;/home/dlut/网络/make_database/数据集——合集/VOCdevkit/VOC2018/Annotations&#39;
xml_list = glob.glob(xml_dir + &#39;/*.xml&#39;)
for xml in xml_list:
    print(xml)
    per = ET.parse(xml)
    p = per.findall(&#39;/object&#39;)

    for oneper in p:  # 找出person节点
        child = oneper.getchildren()[0]  # 找出person节点的子节点
        if child.text == &#39;PinNormal&#39;:   #需要修改的名字
            child.text = &#39;normal bolt&#39;    #修改成什么名字
        if child.text == &#39;PinDefect&#39;:    #需要修改的名字
            child.text = &#39;defect bolt-1&#39;   #修改成什么名字

    per.write(xml)
    print(child.tag, &#39;:&#39;, child.text)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20190906172524991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM4NDI1Nw==,size_16,color_FFFFFF,t_70&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;br /&gt;
修改为：&lt;br /&gt;
&lt;img src=&#34;https://img-blog.csdnimg.cn/20190906172544387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM4NDI1Nw==,size_16,color_FFFFFF,t_70&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;

&lt;p&gt;参考：&lt;br /&gt;
&lt;a href=&#34;https://blog.csdn.net/gusui7202/article/details/85136268&#34; target=&#34;_blank&#34;&gt;https://blog.csdn.net/gusui7202/article/details/85136268&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://blog.csdn.net/gusui7202/article/details/86583444&#34; target=&#34;_blank&#34;&gt;https://blog.csdn.net/gusui7202/article/details/86583444&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://blog.csdn.net/weixin_38632246/article/details/90710139&#34; target=&#34;_blank&#34;&gt;https://blog.csdn.net/weixin_38632246/article/details/90710139&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
